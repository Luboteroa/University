
Led_Direccionales_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d18  08000d20  00010d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d18  08000d18  00010d20  2**0
                  CONTENTS
  4 .ARM          00000000  08000d18  08000d18  00010d20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d18  08000d20  00010d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d18  08000d18  00010d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d1c  08000d1c  00010d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010d20  2**0
                  CONTENTS
 10 .bss          00000050  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010d20  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b9d  00000000  00000000  00010d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006f2  00000000  00000000  000128ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c8  00000000  00000000  00012fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000270  00000000  00000000  000132a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d9e6  00000000  00000000  00013518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000286f  00000000  00000000  00030efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a70de  00000000  00000000  0003376d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000da84b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000980  00000000  00000000  000da89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d00 	.word	0x08000d00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000d00 	.word	0x08000d00

080001c8 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	691b      	ldr	r3, [r3, #16]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <FSM_Read_PushButton>:
			break;
		}
	}
}

void FSM_Read_PushButton(uint8_t *flag2, uint8_t *flag, uint8_t *flag3){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
	uint32_t idr;
	uint8_t B1;



	current_tick = Get_Tick();
 80001ec:	f000 fd06 	bl	8000bfc <Get_Tick>
 80001f0:	61b8      	str	r0, [r7, #24]
	if (current_tick-last_tick >= 100){
 80001f2:	4b23      	ldr	r3, [pc, #140]	; (8000280 <FSM_Read_PushButton+0xa0>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	69ba      	ldr	r2, [r7, #24]
 80001f8:	1ad3      	subs	r3, r2, r3
 80001fa:	2b63      	cmp	r3, #99	; 0x63
 80001fc:	d93b      	bls.n	8000276 <FSM_Read_PushButton+0x96>
		last_tick = current_tick;
 80001fe:	4a20      	ldr	r2, [pc, #128]	; (8000280 <FSM_Read_PushButton+0xa0>)
 8000200:	69bb      	ldr	r3, [r7, #24]
 8000202:	6013      	str	r3, [r2, #0]
		idr = LL_GPIO_ReadInputPort(S1_PORT);
 8000204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000208:	f7ff ffde 	bl	80001c8 <LL_GPIO_ReadInputPort>
 800020c:	6178      	str	r0, [r7, #20]
		idr &= S1;
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	f003 0302 	and.w	r3, r3, #2
 8000214:	617b      	str	r3, [r7, #20]
		(idr > 0) ?	(B1 = 1U) : (B1 = 0U);
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d002      	beq.n	8000222 <FSM_Read_PushButton+0x42>
 800021c:	2301      	movs	r3, #1
 800021e:	77fb      	strb	r3, [r7, #31]
 8000220:	e001      	b.n	8000226 <FSM_Read_PushButton+0x46>
 8000222:	2300      	movs	r3, #0
 8000224:	77fb      	strb	r3, [r7, #31]

		if (button_state == UP){
 8000226:	4b17      	ldr	r3, [pc, #92]	; (8000284 <FSM_Read_PushButton+0xa4>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d106      	bne.n	800023c <FSM_Read_PushButton+0x5c>
			if (B1 == 0)
 800022e:	7ffb      	ldrb	r3, [r7, #31]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d120      	bne.n	8000276 <FSM_Read_PushButton+0x96>
				button_state = DOWN;
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <FSM_Read_PushButton+0xa4>)
 8000236:	2201      	movs	r2, #1
 8000238:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

}
 800023a:	e01c      	b.n	8000276 <FSM_Read_PushButton+0x96>
			if (B1 == 1){
 800023c:	7ffb      	ldrb	r3, [r7, #31]
 800023e:	2b01      	cmp	r3, #1
 8000240:	d119      	bne.n	8000276 <FSM_Read_PushButton+0x96>
				button_state = UP;
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <FSM_Read_PushButton+0xa4>)
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]
				if (*flag==1)
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d109      	bne.n	8000264 <FSM_Read_PushButton+0x84>
					*flag = 0;
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
					*flag2 = 0;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
					*flag3 = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	701a      	strb	r2, [r3, #0]
}
 8000262:	e008      	b.n	8000276 <FSM_Read_PushButton+0x96>
					*flag = 1;
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	2201      	movs	r2, #1
 8000268:	701a      	strb	r2, [r3, #0]
					*flag2 = 0;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]
					*flag3 = 0;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
}
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	2000001c 	.word	0x2000001c
 8000284:	20000020 	.word	0x20000020

08000288 <FSM_Read_PushButton2>:

void FSM_Read_PushButton2(uint8_t *flag2, uint8_t *flag, uint8_t *flag3){
 8000288:	b580      	push	{r7, lr}
 800028a:	b088      	sub	sp, #32
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	uint32_t idr;
	uint8_t B1;



	current_tick = Get_Tick();
 8000294:	f000 fcb2 	bl	8000bfc <Get_Tick>
 8000298:	61b8      	str	r0, [r7, #24]
	if (current_tick-last_tick >= 100){
 800029a:	4b23      	ldr	r3, [pc, #140]	; (8000328 <FSM_Read_PushButton2+0xa0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	69ba      	ldr	r2, [r7, #24]
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	2b63      	cmp	r3, #99	; 0x63
 80002a4:	d93b      	bls.n	800031e <FSM_Read_PushButton2+0x96>
		last_tick = current_tick;
 80002a6:	4a20      	ldr	r2, [pc, #128]	; (8000328 <FSM_Read_PushButton2+0xa0>)
 80002a8:	69bb      	ldr	r3, [r7, #24]
 80002aa:	6013      	str	r3, [r2, #0]
		idr = LL_GPIO_ReadInputPort(S2_PORT);
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f7ff ff8a 	bl	80001c8 <LL_GPIO_ReadInputPort>
 80002b4:	6178      	str	r0, [r7, #20]
		idr &= S2;
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	f003 0310 	and.w	r3, r3, #16
 80002bc:	617b      	str	r3, [r7, #20]
		(idr > 0) ?	(B1 = 1U) : (B1 = 0U);
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d002      	beq.n	80002ca <FSM_Read_PushButton2+0x42>
 80002c4:	2301      	movs	r3, #1
 80002c6:	77fb      	strb	r3, [r7, #31]
 80002c8:	e001      	b.n	80002ce <FSM_Read_PushButton2+0x46>
 80002ca:	2300      	movs	r3, #0
 80002cc:	77fb      	strb	r3, [r7, #31]

		if (button_state == UP){
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <FSM_Read_PushButton2+0xa4>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d106      	bne.n	80002e4 <FSM_Read_PushButton2+0x5c>
			if (B1 == 0)
 80002d6:	7ffb      	ldrb	r3, [r7, #31]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d120      	bne.n	800031e <FSM_Read_PushButton2+0x96>
				button_state = DOWN;
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <FSM_Read_PushButton2+0xa4>)
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

}
 80002e2:	e01c      	b.n	800031e <FSM_Read_PushButton2+0x96>
			if (B1 == 1){
 80002e4:	7ffb      	ldrb	r3, [r7, #31]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d119      	bne.n	800031e <FSM_Read_PushButton2+0x96>
				button_state = UP;
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <FSM_Read_PushButton2+0xa4>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
				if (*flag2==1)
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d109      	bne.n	800030c <FSM_Read_PushButton2+0x84>
					*flag = 0;
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]
					*flag2 = 0;
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]
					*flag3 = 0;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
}
 800030a:	e008      	b.n	800031e <FSM_Read_PushButton2+0x96>
					*flag = 0;
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
					*flag2 = 1;
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	2201      	movs	r2, #1
 8000316:	701a      	strb	r2, [r3, #0]
					*flag3 = 0;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	3720      	adds	r7, #32
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000024 	.word	0x20000024
 800032c:	20000028 	.word	0x20000028

08000330 <FSM_Read_PushButton3>:

void FSM_Read_PushButton3(uint8_t *flag2, uint8_t *flag, uint8_t *flag3){
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
	uint32_t idr;
	uint8_t B1;



	current_tick = Get_Tick();
 800033c:	f000 fc5e 	bl	8000bfc <Get_Tick>
 8000340:	61b8      	str	r0, [r7, #24]
	if (current_tick-last_tick >= 100){
 8000342:	4b22      	ldr	r3, [pc, #136]	; (80003cc <FSM_Read_PushButton3+0x9c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	69ba      	ldr	r2, [r7, #24]
 8000348:	1ad3      	subs	r3, r2, r3
 800034a:	2b63      	cmp	r3, #99	; 0x63
 800034c:	d93a      	bls.n	80003c4 <FSM_Read_PushButton3+0x94>
		last_tick = current_tick;
 800034e:	4a1f      	ldr	r2, [pc, #124]	; (80003cc <FSM_Read_PushButton3+0x9c>)
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	6013      	str	r3, [r2, #0]
		idr = LL_GPIO_ReadInputPort(S3_PORT);
 8000354:	481e      	ldr	r0, [pc, #120]	; (80003d0 <FSM_Read_PushButton3+0xa0>)
 8000356:	f7ff ff37 	bl	80001c8 <LL_GPIO_ReadInputPort>
 800035a:	6178      	str	r0, [r7, #20]
		idr &= S3;
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	617b      	str	r3, [r7, #20]
		(idr > 0) ?	(B1 = 1U) : (B1 = 0U);
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <FSM_Read_PushButton3+0x40>
 800036a:	2301      	movs	r3, #1
 800036c:	77fb      	strb	r3, [r7, #31]
 800036e:	e001      	b.n	8000374 <FSM_Read_PushButton3+0x44>
 8000370:	2300      	movs	r3, #0
 8000372:	77fb      	strb	r3, [r7, #31]

		if (button_state == UP){
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <FSM_Read_PushButton3+0xa4>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d106      	bne.n	800038a <FSM_Read_PushButton3+0x5a>
			if (B1 == 0)
 800037c:	7ffb      	ldrb	r3, [r7, #31]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d120      	bne.n	80003c4 <FSM_Read_PushButton3+0x94>
				button_state = DOWN;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <FSM_Read_PushButton3+0xa4>)
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

}
 8000388:	e01c      	b.n	80003c4 <FSM_Read_PushButton3+0x94>
			if (B1 == 1){
 800038a:	7ffb      	ldrb	r3, [r7, #31]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d119      	bne.n	80003c4 <FSM_Read_PushButton3+0x94>
				button_state = UP;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <FSM_Read_PushButton3+0xa4>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
				if (*flag3==1)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d109      	bne.n	80003b2 <FSM_Read_PushButton3+0x82>
					*flag = 0;
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
					*flag2 = 0;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
					*flag3 = 0;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
}
 80003b0:	e008      	b.n	80003c4 <FSM_Read_PushButton3+0x94>
					*flag = 0;
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
					*flag2 = 0;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
					*flag3 = 1;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
}
 80003c4:	bf00      	nop
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	2000002c 	.word	0x2000002c
 80003d0:	48000400 	.word	0x48000400
 80003d4:	20000030 	.word	0x20000030

080003d8 <DireccionalDerecha>:

void DireccionalDerecha(uint8_t *flag2, uint8_t *flag, uint8_t *flag3){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]

	static uint32_t last_tick = 0;
	static uint8_t secuencia_der = 0;
	uint32_t current_tick;

	current_tick = Get_Tick();
 80003e4:	f000 fc0a 	bl	8000bfc <Get_Tick>
 80003e8:	6178      	str	r0, [r7, #20]

		if (*flag == 1)
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	f040 80da 	bne.w	80005a8 <DireccionalDerecha+0x1d0>
		{
			if (current_tick-last_tick >= 1000)
 80003f4:	4b6f      	ldr	r3, [pc, #444]	; (80005b4 <DireccionalDerecha+0x1dc>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	697a      	ldr	r2, [r7, #20]
 80003fa:	1ad3      	subs	r3, r2, r3
 80003fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000400:	f0c0 80d2 	bcc.w	80005a8 <DireccionalDerecha+0x1d0>
			{
			last_tick = current_tick;
 8000404:	4a6b      	ldr	r2, [pc, #428]	; (80005b4 <DireccionalDerecha+0x1dc>)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	6013      	str	r3, [r2, #0]
			switch(secuencia_der)
 800040a:	4b6b      	ldr	r3, [pc, #428]	; (80005b8 <DireccionalDerecha+0x1e0>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b08      	cmp	r3, #8
 8000410:	f200 80cb 	bhi.w	80005aa <DireccionalDerecha+0x1d2>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <DireccionalDerecha+0x44>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	08000441 	.word	0x08000441
 8000420:	08000469 	.word	0x08000469
 8000424:	08000491 	.word	0x08000491
 8000428:	080004b9 	.word	0x080004b9
 800042c:	080004e1 	.word	0x080004e1
 8000430:	08000509 	.word	0x08000509
 8000434:	08000531 	.word	0x08000531
 8000438:	08000559 	.word	0x08000559
 800043c:	08000581 	.word	0x08000581
				{

			case 0:
				LD0_Set();
 8000440:	f000 faf2 	bl	8000a28 <LD0_Set>
				LD1_Reset();
 8000444:	f000 fb0e 	bl	8000a64 <LD1_Reset>
				LD2_Reset();
 8000448:	f000 fb20 	bl	8000a8c <LD2_Reset>
				LD3_Reset();
 800044c:	f000 fb34 	bl	8000ab8 <LD3_Reset>
				LD4_Reset();
 8000450:	f000 fb48 	bl	8000ae4 <LD4_Reset>
				LD5_Reset();
 8000454:	f000 fb5a 	bl	8000b0c <LD5_Reset>
				LD6_Reset();
 8000458:	f000 fb6e 	bl	8000b38 <LD6_Reset>
				LD7_Reset();
 800045c:	f000 fb84 	bl	8000b68 <LD7_Reset>
				secuencia_der =1;
 8000460:	4b55      	ldr	r3, [pc, #340]	; (80005b8 <DireccionalDerecha+0x1e0>)
 8000462:	2201      	movs	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
				break;
 8000466:	e0a0      	b.n	80005aa <DireccionalDerecha+0x1d2>

			case 1:
				LD0_Set();
 8000468:	f000 fade 	bl	8000a28 <LD0_Set>
				LD1_Set();
 800046c:	f000 faf0 	bl	8000a50 <LD1_Set>
				LD2_Reset();
 8000470:	f000 fb0c 	bl	8000a8c <LD2_Reset>
				LD3_Reset();
 8000474:	f000 fb20 	bl	8000ab8 <LD3_Reset>
				LD4_Reset();
 8000478:	f000 fb34 	bl	8000ae4 <LD4_Reset>
				LD5_Reset();
 800047c:	f000 fb46 	bl	8000b0c <LD5_Reset>
				LD6_Reset();
 8000480:	f000 fb5a 	bl	8000b38 <LD6_Reset>
				LD7_Reset();
 8000484:	f000 fb70 	bl	8000b68 <LD7_Reset>
				secuencia_der =2;
 8000488:	4b4b      	ldr	r3, [pc, #300]	; (80005b8 <DireccionalDerecha+0x1e0>)
 800048a:	2202      	movs	r2, #2
 800048c:	701a      	strb	r2, [r3, #0]
				break;
 800048e:	e08c      	b.n	80005aa <DireccionalDerecha+0x1d2>

			case 2:
				LD0_Set();
 8000490:	f000 faca 	bl	8000a28 <LD0_Set>
				LD1_Set();
 8000494:	f000 fadc 	bl	8000a50 <LD1_Set>
				LD2_Set();
 8000498:	f000 faee 	bl	8000a78 <LD2_Set>
				LD3_Reset();
 800049c:	f000 fb0c 	bl	8000ab8 <LD3_Reset>
				LD4_Reset();
 80004a0:	f000 fb20 	bl	8000ae4 <LD4_Reset>
				LD5_Reset();
 80004a4:	f000 fb32 	bl	8000b0c <LD5_Reset>
				LD6_Reset();
 80004a8:	f000 fb46 	bl	8000b38 <LD6_Reset>
				LD7_Reset();
 80004ac:	f000 fb5c 	bl	8000b68 <LD7_Reset>
				secuencia_der =3;
 80004b0:	4b41      	ldr	r3, [pc, #260]	; (80005b8 <DireccionalDerecha+0x1e0>)
 80004b2:	2203      	movs	r2, #3
 80004b4:	701a      	strb	r2, [r3, #0]
				break;
 80004b6:	e078      	b.n	80005aa <DireccionalDerecha+0x1d2>

			case 3:
				LD0_Set();
 80004b8:	f000 fab6 	bl	8000a28 <LD0_Set>
				LD1_Set();
 80004bc:	f000 fac8 	bl	8000a50 <LD1_Set>
				LD2_Set();
 80004c0:	f000 fada 	bl	8000a78 <LD2_Set>
				LD3_Set();
 80004c4:	f000 faec 	bl	8000aa0 <LD3_Set>
				LD4_Reset();
 80004c8:	f000 fb0c 	bl	8000ae4 <LD4_Reset>
				LD5_Reset();
 80004cc:	f000 fb1e 	bl	8000b0c <LD5_Reset>
				LD6_Reset();
 80004d0:	f000 fb32 	bl	8000b38 <LD6_Reset>
				LD7_Reset();
 80004d4:	f000 fb48 	bl	8000b68 <LD7_Reset>
				secuencia_der =4;
 80004d8:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <DireccionalDerecha+0x1e0>)
 80004da:	2204      	movs	r2, #4
 80004dc:	701a      	strb	r2, [r3, #0]
				break;
 80004de:	e064      	b.n	80005aa <DireccionalDerecha+0x1d2>

			case 4:
				LD0_Set();
 80004e0:	f000 faa2 	bl	8000a28 <LD0_Set>
				LD1_Set();
 80004e4:	f000 fab4 	bl	8000a50 <LD1_Set>
				LD2_Set();
 80004e8:	f000 fac6 	bl	8000a78 <LD2_Set>
				LD3_Set();
 80004ec:	f000 fad8 	bl	8000aa0 <LD3_Set>
				LD4_Set();
 80004f0:	f000 faee 	bl	8000ad0 <LD4_Set>
				LD5_Reset();
 80004f4:	f000 fb0a 	bl	8000b0c <LD5_Reset>
				LD6_Reset();
 80004f8:	f000 fb1e 	bl	8000b38 <LD6_Reset>
				LD7_Reset();
 80004fc:	f000 fb34 	bl	8000b68 <LD7_Reset>
				secuencia_der =5;
 8000500:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <DireccionalDerecha+0x1e0>)
 8000502:	2205      	movs	r2, #5
 8000504:	701a      	strb	r2, [r3, #0]
				break;
 8000506:	e050      	b.n	80005aa <DireccionalDerecha+0x1d2>

			case 5:
				LD0_Set();
 8000508:	f000 fa8e 	bl	8000a28 <LD0_Set>
				LD1_Set();
 800050c:	f000 faa0 	bl	8000a50 <LD1_Set>
				LD2_Set();
 8000510:	f000 fab2 	bl	8000a78 <LD2_Set>
				LD3_Set();
 8000514:	f000 fac4 	bl	8000aa0 <LD3_Set>
				LD4_Set();
 8000518:	f000 fada 	bl	8000ad0 <LD4_Set>
				LD5_Set();
 800051c:	f000 faec 	bl	8000af8 <LD5_Set>
				LD6_Reset();
 8000520:	f000 fb0a 	bl	8000b38 <LD6_Reset>
				LD7_Reset();
 8000524:	f000 fb20 	bl	8000b68 <LD7_Reset>
				secuencia_der =6;
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <DireccionalDerecha+0x1e0>)
 800052a:	2206      	movs	r2, #6
 800052c:	701a      	strb	r2, [r3, #0]
				break;
 800052e:	e03c      	b.n	80005aa <DireccionalDerecha+0x1d2>

			case 6:
				LD0_Set();
 8000530:	f000 fa7a 	bl	8000a28 <LD0_Set>
				LD1_Set();
 8000534:	f000 fa8c 	bl	8000a50 <LD1_Set>
				LD2_Set();
 8000538:	f000 fa9e 	bl	8000a78 <LD2_Set>
				LD3_Set();
 800053c:	f000 fab0 	bl	8000aa0 <LD3_Set>
				LD4_Set();
 8000540:	f000 fac6 	bl	8000ad0 <LD4_Set>
				LD5_Set();
 8000544:	f000 fad8 	bl	8000af8 <LD5_Set>
				LD6_Set();
 8000548:	f000 faea 	bl	8000b20 <LD6_Set>
				LD7_Reset();
 800054c:	f000 fb0c 	bl	8000b68 <LD7_Reset>
				secuencia_der =7;
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <DireccionalDerecha+0x1e0>)
 8000552:	2207      	movs	r2, #7
 8000554:	701a      	strb	r2, [r3, #0]
				break;
 8000556:	e028      	b.n	80005aa <DireccionalDerecha+0x1d2>

			case 7:
				LD0_Set();
 8000558:	f000 fa66 	bl	8000a28 <LD0_Set>
				LD1_Set();
 800055c:	f000 fa78 	bl	8000a50 <LD1_Set>
				LD2_Set();
 8000560:	f000 fa8a 	bl	8000a78 <LD2_Set>
				LD3_Set();
 8000564:	f000 fa9c 	bl	8000aa0 <LD3_Set>
				LD4_Set();
 8000568:	f000 fab2 	bl	8000ad0 <LD4_Set>
				LD5_Set();
 800056c:	f000 fac4 	bl	8000af8 <LD5_Set>
				LD6_Set();
 8000570:	f000 fad6 	bl	8000b20 <LD6_Set>
				LD7_Set();
 8000574:	f000 faec 	bl	8000b50 <LD7_Set>
				secuencia_der =8;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <DireccionalDerecha+0x1e0>)
 800057a:	2208      	movs	r2, #8
 800057c:	701a      	strb	r2, [r3, #0]
				break;
 800057e:	e014      	b.n	80005aa <DireccionalDerecha+0x1d2>

			case 8:
				LD0_Reset();
 8000580:	f000 fa5c 	bl	8000a3c <LD0_Reset>
				LD1_Reset();
 8000584:	f000 fa6e 	bl	8000a64 <LD1_Reset>
				LD2_Reset();
 8000588:	f000 fa80 	bl	8000a8c <LD2_Reset>
				LD3_Reset();
 800058c:	f000 fa94 	bl	8000ab8 <LD3_Reset>
				LD4_Reset();
 8000590:	f000 faa8 	bl	8000ae4 <LD4_Reset>
				LD5_Reset();
 8000594:	f000 faba 	bl	8000b0c <LD5_Reset>
				LD6_Reset();
 8000598:	f000 face 	bl	8000b38 <LD6_Reset>
				LD7_Reset();
 800059c:	f000 fae4 	bl	8000b68 <LD7_Reset>
				secuencia_der =0;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <DireccionalDerecha+0x1e0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
				break;
 80005a6:	e000      	b.n	80005aa <DireccionalDerecha+0x1d2>
				}
			}
 80005a8:	bf00      	nop
		}
}
 80005aa:	bf00      	nop
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000034 	.word	0x20000034
 80005b8:	20000038 	.word	0x20000038

080005bc <Stop>:

void Stop(uint8_t *flag2, uint8_t *flag, uint8_t *flag3){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	static uint32_t last_tick = 0;
	static uint8_t stop = 0;
	uint32_t current_tick;

	current_tick = Get_Tick();
 80005c8:	f000 fb18 	bl	8000bfc <Get_Tick>
 80005cc:	6178      	str	r0, [r7, #20]

	if (*flag2 == 1)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d138      	bne.n	8000648 <Stop+0x8c>
	{
		if (current_tick-last_tick >= 500){
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <Stop+0x98>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005e2:	d331      	bcc.n	8000648 <Stop+0x8c>
				last_tick = current_tick;
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <Stop+0x98>)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	6013      	str	r3, [r2, #0]

				switch(stop)
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <Stop+0x9c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <Stop+0x3c>
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d014      	beq.n	8000620 <Stop+0x64>
					LD7_Reset();
					break;
				}
			}
	}
}
 80005f6:	e028      	b.n	800064a <Stop+0x8e>
					stop = 1;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <Stop+0x9c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
					LD0_Set();
 80005fe:	f000 fa13 	bl	8000a28 <LD0_Set>
					LD1_Set();
 8000602:	f000 fa25 	bl	8000a50 <LD1_Set>
					LD2_Set();
 8000606:	f000 fa37 	bl	8000a78 <LD2_Set>
					LD3_Set();
 800060a:	f000 fa49 	bl	8000aa0 <LD3_Set>
					LD4_Set();
 800060e:	f000 fa5f 	bl	8000ad0 <LD4_Set>
					LD5_Set();
 8000612:	f000 fa71 	bl	8000af8 <LD5_Set>
					LD6_Set();
 8000616:	f000 fa83 	bl	8000b20 <LD6_Set>
					LD7_Set();
 800061a:	f000 fa99 	bl	8000b50 <LD7_Set>
					break;
 800061e:	e014      	b.n	800064a <Stop+0x8e>
					stop = 0;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <Stop+0x9c>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
					LD0_Reset();
 8000626:	f000 fa09 	bl	8000a3c <LD0_Reset>
					LD1_Reset();
 800062a:	f000 fa1b 	bl	8000a64 <LD1_Reset>
					LD2_Reset();
 800062e:	f000 fa2d 	bl	8000a8c <LD2_Reset>
					LD3_Reset();
 8000632:	f000 fa41 	bl	8000ab8 <LD3_Reset>
					LD4_Reset();
 8000636:	f000 fa55 	bl	8000ae4 <LD4_Reset>
					LD5_Reset();
 800063a:	f000 fa67 	bl	8000b0c <LD5_Reset>
					LD6_Reset();
 800063e:	f000 fa7b 	bl	8000b38 <LD6_Reset>
					LD7_Reset();
 8000642:	f000 fa91 	bl	8000b68 <LD7_Reset>
					break;
 8000646:	e000      	b.n	800064a <Stop+0x8e>
			}
 8000648:	bf00      	nop
}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000003c 	.word	0x2000003c
 8000658:	20000040 	.word	0x20000040

0800065c <DireccionalIzquierda>:

void DireccionalIzquierda(uint8_t *flag2, uint8_t *flag, uint8_t *flag3){
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]

	static uint32_t last_tick = 0;
	static uint8_t secuencia_izq = 0;
	uint32_t current_tick;

	current_tick = Get_Tick();
 8000668:	f000 fac8 	bl	8000bfc <Get_Tick>
 800066c:	6178      	str	r0, [r7, #20]

		if (*flag3 == 1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	f040 80da 	bne.w	800082c <DireccionalIzquierda+0x1d0>
		{
			if (current_tick-last_tick >= 1000)
 8000678:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <DireccionalIzquierda+0x1dc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000684:	f0c0 80d2 	bcc.w	800082c <DireccionalIzquierda+0x1d0>
			{
			last_tick = current_tick;
 8000688:	4a6b      	ldr	r2, [pc, #428]	; (8000838 <DireccionalIzquierda+0x1dc>)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	6013      	str	r3, [r2, #0]
			switch(secuencia_izq)
 800068e:	4b6b      	ldr	r3, [pc, #428]	; (800083c <DireccionalIzquierda+0x1e0>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b08      	cmp	r3, #8
 8000694:	f200 80cb 	bhi.w	800082e <DireccionalIzquierda+0x1d2>
 8000698:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <DireccionalIzquierda+0x44>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	080006c5 	.word	0x080006c5
 80006a4:	080006ed 	.word	0x080006ed
 80006a8:	08000715 	.word	0x08000715
 80006ac:	0800073d 	.word	0x0800073d
 80006b0:	08000765 	.word	0x08000765
 80006b4:	0800078d 	.word	0x0800078d
 80006b8:	080007b5 	.word	0x080007b5
 80006bc:	080007dd 	.word	0x080007dd
 80006c0:	08000805 	.word	0x08000805
				{

			case 0:
				LD7_Set();
 80006c4:	f000 fa44 	bl	8000b50 <LD7_Set>
				LD6_Reset();
 80006c8:	f000 fa36 	bl	8000b38 <LD6_Reset>
				LD5_Reset();
 80006cc:	f000 fa1e 	bl	8000b0c <LD5_Reset>
				LD4_Reset();
 80006d0:	f000 fa08 	bl	8000ae4 <LD4_Reset>
				LD3_Reset();
 80006d4:	f000 f9f0 	bl	8000ab8 <LD3_Reset>
				LD2_Reset();
 80006d8:	f000 f9d8 	bl	8000a8c <LD2_Reset>
				LD1_Reset();
 80006dc:	f000 f9c2 	bl	8000a64 <LD1_Reset>
				LD0_Reset();
 80006e0:	f000 f9ac 	bl	8000a3c <LD0_Reset>
				secuencia_izq =1;
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <DireccionalIzquierda+0x1e0>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
				break;
 80006ea:	e0a0      	b.n	800082e <DireccionalIzquierda+0x1d2>

			case 1:
				LD7_Set();
 80006ec:	f000 fa30 	bl	8000b50 <LD7_Set>
				LD6_Set();
 80006f0:	f000 fa16 	bl	8000b20 <LD6_Set>
				LD5_Reset();
 80006f4:	f000 fa0a 	bl	8000b0c <LD5_Reset>
				LD4_Reset();
 80006f8:	f000 f9f4 	bl	8000ae4 <LD4_Reset>
				LD3_Reset();
 80006fc:	f000 f9dc 	bl	8000ab8 <LD3_Reset>
				LD2_Reset();
 8000700:	f000 f9c4 	bl	8000a8c <LD2_Reset>
				LD1_Reset();
 8000704:	f000 f9ae 	bl	8000a64 <LD1_Reset>
				LD0_Reset();
 8000708:	f000 f998 	bl	8000a3c <LD0_Reset>
				secuencia_izq =2;
 800070c:	4b4b      	ldr	r3, [pc, #300]	; (800083c <DireccionalIzquierda+0x1e0>)
 800070e:	2202      	movs	r2, #2
 8000710:	701a      	strb	r2, [r3, #0]
				break;
 8000712:	e08c      	b.n	800082e <DireccionalIzquierda+0x1d2>

			case 2:
				LD7_Set();
 8000714:	f000 fa1c 	bl	8000b50 <LD7_Set>
				LD6_Set();
 8000718:	f000 fa02 	bl	8000b20 <LD6_Set>
				LD5_Set();
 800071c:	f000 f9ec 	bl	8000af8 <LD5_Set>
				LD4_Reset();
 8000720:	f000 f9e0 	bl	8000ae4 <LD4_Reset>
				LD3_Reset();
 8000724:	f000 f9c8 	bl	8000ab8 <LD3_Reset>
				LD2_Reset();
 8000728:	f000 f9b0 	bl	8000a8c <LD2_Reset>
				LD1_Reset();
 800072c:	f000 f99a 	bl	8000a64 <LD1_Reset>
				LD0_Reset();
 8000730:	f000 f984 	bl	8000a3c <LD0_Reset>
				secuencia_izq =3;
 8000734:	4b41      	ldr	r3, [pc, #260]	; (800083c <DireccionalIzquierda+0x1e0>)
 8000736:	2203      	movs	r2, #3
 8000738:	701a      	strb	r2, [r3, #0]
				break;
 800073a:	e078      	b.n	800082e <DireccionalIzquierda+0x1d2>

			case 3:
				LD7_Set();
 800073c:	f000 fa08 	bl	8000b50 <LD7_Set>
				LD6_Set();
 8000740:	f000 f9ee 	bl	8000b20 <LD6_Set>
				LD5_Set();
 8000744:	f000 f9d8 	bl	8000af8 <LD5_Set>
				LD4_Set();
 8000748:	f000 f9c2 	bl	8000ad0 <LD4_Set>
				LD3_Reset();
 800074c:	f000 f9b4 	bl	8000ab8 <LD3_Reset>
				LD2_Reset();
 8000750:	f000 f99c 	bl	8000a8c <LD2_Reset>
				LD1_Reset();
 8000754:	f000 f986 	bl	8000a64 <LD1_Reset>
				LD0_Reset();
 8000758:	f000 f970 	bl	8000a3c <LD0_Reset>
				secuencia_izq =4;
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <DireccionalIzquierda+0x1e0>)
 800075e:	2204      	movs	r2, #4
 8000760:	701a      	strb	r2, [r3, #0]
				break;
 8000762:	e064      	b.n	800082e <DireccionalIzquierda+0x1d2>

			case 4:
				LD7_Set();
 8000764:	f000 f9f4 	bl	8000b50 <LD7_Set>
				LD6_Set();
 8000768:	f000 f9da 	bl	8000b20 <LD6_Set>
				LD5_Set();
 800076c:	f000 f9c4 	bl	8000af8 <LD5_Set>
				LD4_Set();
 8000770:	f000 f9ae 	bl	8000ad0 <LD4_Set>
				LD3_Set();
 8000774:	f000 f994 	bl	8000aa0 <LD3_Set>
				LD2_Reset();
 8000778:	f000 f988 	bl	8000a8c <LD2_Reset>
				LD1_Reset();
 800077c:	f000 f972 	bl	8000a64 <LD1_Reset>
				LD0_Reset();
 8000780:	f000 f95c 	bl	8000a3c <LD0_Reset>
				secuencia_izq =5;
 8000784:	4b2d      	ldr	r3, [pc, #180]	; (800083c <DireccionalIzquierda+0x1e0>)
 8000786:	2205      	movs	r2, #5
 8000788:	701a      	strb	r2, [r3, #0]
				break;
 800078a:	e050      	b.n	800082e <DireccionalIzquierda+0x1d2>

			case 5:
				LD7_Set();
 800078c:	f000 f9e0 	bl	8000b50 <LD7_Set>
				LD6_Set();
 8000790:	f000 f9c6 	bl	8000b20 <LD6_Set>
				LD5_Set();
 8000794:	f000 f9b0 	bl	8000af8 <LD5_Set>
				LD4_Set();
 8000798:	f000 f99a 	bl	8000ad0 <LD4_Set>
				LD3_Set();
 800079c:	f000 f980 	bl	8000aa0 <LD3_Set>
				LD2_Set();
 80007a0:	f000 f96a 	bl	8000a78 <LD2_Set>
				LD1_Reset();
 80007a4:	f000 f95e 	bl	8000a64 <LD1_Reset>
				LD0_Reset();
 80007a8:	f000 f948 	bl	8000a3c <LD0_Reset>
				secuencia_izq =6;
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <DireccionalIzquierda+0x1e0>)
 80007ae:	2206      	movs	r2, #6
 80007b0:	701a      	strb	r2, [r3, #0]
				break;
 80007b2:	e03c      	b.n	800082e <DireccionalIzquierda+0x1d2>

			case 6:
				LD7_Set();
 80007b4:	f000 f9cc 	bl	8000b50 <LD7_Set>
				LD6_Set();
 80007b8:	f000 f9b2 	bl	8000b20 <LD6_Set>
				LD5_Set();
 80007bc:	f000 f99c 	bl	8000af8 <LD5_Set>
				LD4_Set();
 80007c0:	f000 f986 	bl	8000ad0 <LD4_Set>
				LD3_Set();
 80007c4:	f000 f96c 	bl	8000aa0 <LD3_Set>
				LD2_Set();
 80007c8:	f000 f956 	bl	8000a78 <LD2_Set>
				LD1_Set();
 80007cc:	f000 f940 	bl	8000a50 <LD1_Set>
				LD0_Reset();
 80007d0:	f000 f934 	bl	8000a3c <LD0_Reset>
				secuencia_izq =7;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <DireccionalIzquierda+0x1e0>)
 80007d6:	2207      	movs	r2, #7
 80007d8:	701a      	strb	r2, [r3, #0]
				break;
 80007da:	e028      	b.n	800082e <DireccionalIzquierda+0x1d2>

			case 7:
				LD7_Set();
 80007dc:	f000 f9b8 	bl	8000b50 <LD7_Set>
				LD6_Set();
 80007e0:	f000 f99e 	bl	8000b20 <LD6_Set>
				LD5_Set();
 80007e4:	f000 f988 	bl	8000af8 <LD5_Set>
				LD4_Set();
 80007e8:	f000 f972 	bl	8000ad0 <LD4_Set>
				LD3_Set();
 80007ec:	f000 f958 	bl	8000aa0 <LD3_Set>
				LD2_Set();
 80007f0:	f000 f942 	bl	8000a78 <LD2_Set>
				LD1_Set();
 80007f4:	f000 f92c 	bl	8000a50 <LD1_Set>
				LD7_Set();
 80007f8:	f000 f9aa 	bl	8000b50 <LD7_Set>
				secuencia_izq =8;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <DireccionalIzquierda+0x1e0>)
 80007fe:	2208      	movs	r2, #8
 8000800:	701a      	strb	r2, [r3, #0]
				break;
 8000802:	e014      	b.n	800082e <DireccionalIzquierda+0x1d2>

			case 8:
				LD7_Reset();
 8000804:	f000 f9b0 	bl	8000b68 <LD7_Reset>
				LD6_Reset();
 8000808:	f000 f996 	bl	8000b38 <LD6_Reset>
				LD5_Reset();
 800080c:	f000 f97e 	bl	8000b0c <LD5_Reset>
				LD4_Reset();
 8000810:	f000 f968 	bl	8000ae4 <LD4_Reset>
				LD3_Reset();
 8000814:	f000 f950 	bl	8000ab8 <LD3_Reset>
				LD2_Reset();
 8000818:	f000 f938 	bl	8000a8c <LD2_Reset>
				LD1_Reset();
 800081c:	f000 f922 	bl	8000a64 <LD1_Reset>
				LD0_Reset();
 8000820:	f000 f90c 	bl	8000a3c <LD0_Reset>
				secuencia_izq =0;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <DireccionalIzquierda+0x1e0>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
				break;
 800082a:	e000      	b.n	800082e <DireccionalIzquierda+0x1d2>
				}
			}
 800082c:	bf00      	nop
		}
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000044 	.word	0x20000044
 800083c:	20000048 	.word	0x20000048

08000840 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800084a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800084c:	4907      	ldr	r1, [pc, #28]	; (800086c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4013      	ands	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800085e:	68fb      	ldr	r3, [r7, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	40021000 	.word	0x40021000

08000870 <LL_GPIO_SetPinMode>:
{
 8000870:	b480      	push	{r7}
 8000872:	b08b      	sub	sp, #44	; 0x2c
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	fa93 f3a3 	rbit	r3, r3
 800088a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d101      	bne.n	800089a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000896:	2320      	movs	r3, #32
 8000898:	e003      	b.n	80008a2 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	fab3 f383 	clz	r3, r3
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	2103      	movs	r1, #3
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	401a      	ands	r2, r3
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	fa93 f3a3 	rbit	r3, r3
 80008b8:	61fb      	str	r3, [r7, #28]
  return result;
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80008c4:	2320      	movs	r3, #32
 80008c6:	e003      	b.n	80008d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80008c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ca:	fab3 f383 	clz	r3, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	431a      	orrs	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	601a      	str	r2, [r3, #0]
}
 80008de:	bf00      	nop
 80008e0:	372c      	adds	r7, #44	; 0x2c
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	619a      	str	r2, [r3, #24]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <HAL_NUCLEO_L476_INIT>:
 *      Author: gosor
 */

#include "hal_nucleo_l476.h"

void HAL_NUCLEO_L476_INIT(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	LL_Init1msTick(4000000);
 8000928:	483d      	ldr	r0, [pc, #244]	; (8000a20 <HAL_NUCLEO_L476_INIT+0xfc>)
 800092a:	f000 f98d 	bl	8000c48 <LL_Init1msTick>

	LD0_CLK_ENABLE();
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff ff86 	bl	8000840 <LL_AHB2_GRP1_EnableClock>
	LD4_CLK_ENABLE();
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff ff83 	bl	8000840 <LL_AHB2_GRP1_EnableClock>

	S1_CLK_ENABLE();
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff ff80 	bl	8000840 <LL_AHB2_GRP1_EnableClock>
	S2_CLK_ENABLE();
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff ff7d 	bl	8000840 <LL_AHB2_GRP1_EnableClock>
	S3_CLK_ENABLE();
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff ff7a 	bl	8000840 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_SetPinMode(LD0_PORT, LD0, LL_GPIO_MODE_OUTPUT);
 800094c:	2201      	movs	r2, #1
 800094e:	2108      	movs	r1, #8
 8000950:	4834      	ldr	r0, [pc, #208]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 8000952:	f7ff ff8d 	bl	8000870 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(LD1_PORT, LD1, LL_GPIO_MODE_OUTPUT);
 8000956:	2201      	movs	r2, #1
 8000958:	2120      	movs	r1, #32
 800095a:	4832      	ldr	r0, [pc, #200]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 800095c:	f7ff ff88 	bl	8000870 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(LD2_PORT, LD2, LL_GPIO_MODE_OUTPUT);
 8000960:	2201      	movs	r2, #1
 8000962:	2110      	movs	r1, #16
 8000964:	482f      	ldr	r0, [pc, #188]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 8000966:	f7ff ff83 	bl	8000870 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(LD3_PORT, LD3, LL_GPIO_MODE_OUTPUT);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000970:	482c      	ldr	r0, [pc, #176]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 8000972:	f7ff ff7d 	bl	8000870 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(LD4_PORT, LD4, LL_GPIO_MODE_OUTPUT);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f7ff ff76 	bl	8000870 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(LD5_PORT, LD5, LL_GPIO_MODE_OUTPUT);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f7ff ff6f 	bl	8000870 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(LD6_PORT, LD6, LL_GPIO_MODE_OUTPUT);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000998:	4822      	ldr	r0, [pc, #136]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 800099a:	f7ff ff69 	bl	8000870 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(LD7_PORT, LD7, LL_GPIO_MODE_OUTPUT);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a4:	481f      	ldr	r0, [pc, #124]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 80009a6:	f7ff ff63 	bl	8000870 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinMode(S1_PORT, S1, LL_GPIO_MODE_INPUT);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2102      	movs	r1, #2
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f7ff ff5d 	bl	8000870 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(S2_PORT, S2, LL_GPIO_MODE_INPUT);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2110      	movs	r1, #16
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f7ff ff57 	bl	8000870 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(S3_PORT, S3, LL_GPIO_MODE_INPUT);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2101      	movs	r1, #1
 80009c6:	4817      	ldr	r0, [pc, #92]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 80009c8:	f7ff ff52 	bl	8000870 <LL_GPIO_SetPinMode>

	LL_GPIO_SetOutputPin(LD0_PORT, LD0);
 80009cc:	2108      	movs	r1, #8
 80009ce:	4815      	ldr	r0, [pc, #84]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 80009d0:	f7ff ff8b 	bl	80008ea <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(LD1_PORT, LD1);
 80009d4:	2120      	movs	r1, #32
 80009d6:	4813      	ldr	r0, [pc, #76]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 80009d8:	f7ff ff87 	bl	80008ea <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(LD2_PORT, LD2);
 80009dc:	2110      	movs	r1, #16
 80009de:	4811      	ldr	r0, [pc, #68]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 80009e0:	f7ff ff83 	bl	80008ea <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(LD3_PORT, LD3);
 80009e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e8:	480e      	ldr	r0, [pc, #56]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 80009ea:	f7ff ff7e 	bl	80008ea <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(LD4_PORT, LD4);
 80009ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f7ff ff78 	bl	80008ea <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(LD5_PORT, LD5);
 80009fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f7ff ff72 	bl	80008ea <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(LD6_PORT, LD6);
 8000a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 8000a0c:	f7ff ff6d 	bl	80008ea <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(LD7_PORT, LD7);
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <HAL_NUCLEO_L476_INIT+0x100>)
 8000a16:	f7ff ff68 	bl	80008ea <LL_GPIO_SetOutputPin>

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	003d0900 	.word	0x003d0900
 8000a24:	48000400 	.word	0x48000400

08000a28 <LD0_Set>:


void LD0_Set(void){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LD0_PORT, LD0);
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	4802      	ldr	r0, [pc, #8]	; (8000a38 <LD0_Set+0x10>)
 8000a30:	f7ff ff5b 	bl	80008ea <LL_GPIO_SetOutputPin>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	48000400 	.word	0x48000400

08000a3c <LD0_Reset>:

void LD0_Reset(void){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LD0_PORT, LD0);
 8000a40:	2108      	movs	r1, #8
 8000a42:	4802      	ldr	r0, [pc, #8]	; (8000a4c <LD0_Reset+0x10>)
 8000a44:	f7ff ff5f 	bl	8000906 <LL_GPIO_ResetOutputPin>
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	48000400 	.word	0x48000400

08000a50 <LD1_Set>:

void LD1_Set(void){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LD1_PORT, LD1);
 8000a54:	2120      	movs	r1, #32
 8000a56:	4802      	ldr	r0, [pc, #8]	; (8000a60 <LD1_Set+0x10>)
 8000a58:	f7ff ff47 	bl	80008ea <LL_GPIO_SetOutputPin>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	48000400 	.word	0x48000400

08000a64 <LD1_Reset>:

void LD1_Reset(void){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LD1_PORT, LD1);
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4802      	ldr	r0, [pc, #8]	; (8000a74 <LD1_Reset+0x10>)
 8000a6c:	f7ff ff4b 	bl	8000906 <LL_GPIO_ResetOutputPin>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	48000400 	.word	0x48000400

08000a78 <LD2_Set>:

void LD2_Set(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LD2_PORT, LD2);
 8000a7c:	2110      	movs	r1, #16
 8000a7e:	4802      	ldr	r0, [pc, #8]	; (8000a88 <LD2_Set+0x10>)
 8000a80:	f7ff ff33 	bl	80008ea <LL_GPIO_SetOutputPin>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	48000400 	.word	0x48000400

08000a8c <LD2_Reset>:

void LD2_Reset(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LD2_PORT, LD2);
 8000a90:	2110      	movs	r1, #16
 8000a92:	4802      	ldr	r0, [pc, #8]	; (8000a9c <LD2_Reset+0x10>)
 8000a94:	f7ff ff37 	bl	8000906 <LL_GPIO_ResetOutputPin>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	48000400 	.word	0x48000400

08000aa0 <LD3_Set>:

void LD3_Set(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LD3_PORT, LD3);
 8000aa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <LD3_Set+0x14>)
 8000aaa:	f7ff ff1e 	bl	80008ea <LL_GPIO_SetOutputPin>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	48000400 	.word	0x48000400

08000ab8 <LD3_Reset>:

void LD3_Reset(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LD3_PORT, LD3);
 8000abc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <LD3_Reset+0x14>)
 8000ac2:	f7ff ff20 	bl	8000906 <LL_GPIO_ResetOutputPin>
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	48000400 	.word	0x48000400

08000ad0 <LD4_Set>:

void LD4_Set(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LD4_PORT, LD4);
 8000ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f7ff ff05 	bl	80008ea <LL_GPIO_SetOutputPin>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <LD4_Reset>:

void LD4_Reset(void){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LD4_PORT, LD4);
 8000ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f7ff ff09 	bl	8000906 <LL_GPIO_ResetOutputPin>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <LD5_Set>:

void LD5_Set(void){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LD5_PORT, LD5);
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f7ff fef1 	bl	80008ea <LL_GPIO_SetOutputPin>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <LD5_Reset>:

void LD5_Reset(void){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LD5_PORT, LD5);
 8000b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f7ff fef5 	bl	8000906 <LL_GPIO_ResetOutputPin>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <LD6_Set>:

void LD6_Set(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LD6_PORT, LD6);
 8000b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <LD6_Set+0x14>)
 8000b2a:	f7ff fede 	bl	80008ea <LL_GPIO_SetOutputPin>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	48000400 	.word	0x48000400

08000b38 <LD6_Reset>:

void LD6_Reset(void){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LD6_PORT, LD6);
 8000b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <LD6_Reset+0x14>)
 8000b42:	f7ff fee0 	bl	8000906 <LL_GPIO_ResetOutputPin>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	48000400 	.word	0x48000400

08000b50 <LD7_Set>:

void LD7_Set(void){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LD7_PORT, LD7);
 8000b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <LD7_Set+0x14>)
 8000b5a:	f7ff fec6 	bl	80008ea <LL_GPIO_SetOutputPin>
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	48000400 	.word	0x48000400

08000b68 <LD7_Reset>:

void LD7_Reset(void){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LD7_PORT, LD7);
 8000b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <LD7_Reset+0x14>)
 8000b72:	f7ff fec8 	bl	8000906 <LL_GPIO_ResetOutputPin>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	48000400 	.word	0x48000400

08000b80 <main>:
static uint8_t temp = 0;
static uint8_t temp2 = 0;
static uint8_t temp3 = 0;

int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0

	HAL_NUCLEO_L476_INIT();
 8000b84:	f7ff fece 	bl	8000924 <HAL_NUCLEO_L476_INIT>
		//FSM_LD2_Blink();
		//Button1 = LL_GPIO_ReadInputPort(GPIOA);
		//S1 = 48
		//S2 = 34
		//NO PRE = 50
		FSM_Read_PushButton(&temp,&temp2,&temp3);
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <main+0x48>)
 8000b8a:	4910      	ldr	r1, [pc, #64]	; (8000bcc <main+0x4c>)
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <main+0x50>)
 8000b8e:	f7ff fb27 	bl	80001e0 <FSM_Read_PushButton>
		FSM_Read_PushButton2(&temp,&temp2,&temp3);
 8000b92:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <main+0x48>)
 8000b94:	490d      	ldr	r1, [pc, #52]	; (8000bcc <main+0x4c>)
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <main+0x50>)
 8000b98:	f7ff fb76 	bl	8000288 <FSM_Read_PushButton2>
		FSM_Read_PushButton3(&temp,&temp2,&temp3);
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <main+0x48>)
 8000b9e:	490b      	ldr	r1, [pc, #44]	; (8000bcc <main+0x4c>)
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <main+0x50>)
 8000ba2:	f7ff fbc5 	bl	8000330 <FSM_Read_PushButton3>
		DireccionalDerecha(&temp,&temp2,&temp3);
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <main+0x48>)
 8000ba8:	4908      	ldr	r1, [pc, #32]	; (8000bcc <main+0x4c>)
 8000baa:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <main+0x50>)
 8000bac:	f7ff fc14 	bl	80003d8 <DireccionalDerecha>
		DireccionalIzquierda(&temp,&temp2,&temp3);
 8000bb0:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <main+0x48>)
 8000bb2:	4906      	ldr	r1, [pc, #24]	; (8000bcc <main+0x4c>)
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <main+0x50>)
 8000bb6:	f7ff fd51 	bl	800065c <DireccionalIzquierda>
		Stop(&temp,&temp2,&temp3);
 8000bba:	4a03      	ldr	r2, [pc, #12]	; (8000bc8 <main+0x48>)
 8000bbc:	4903      	ldr	r1, [pc, #12]	; (8000bcc <main+0x4c>)
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <main+0x50>)
 8000bc0:	f7ff fcfc 	bl	80005bc <Stop>
		FSM_Read_PushButton(&temp,&temp2,&temp3);
 8000bc4:	e7e0      	b.n	8000b88 <main+0x8>
 8000bc6:	bf00      	nop
 8000bc8:	2000004b 	.word	0x2000004b
 8000bcc:	2000004a 	.word	0x2000004a
 8000bd0:	20000049 	.word	0x20000049

08000bd4 <SysTick_Handler>:



uint32_t msTick = 0;

void SysTick_Handler(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	SysTick_Callback();
 8000bd8:	f000 f802 	bl	8000be0 <SysTick_Callback>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <SysTick_Callback>:

void SysTick_Callback(void){
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	msTick++;
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Callback+0x18>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a03      	ldr	r2, [pc, #12]	; (8000bf8 <SysTick_Callback+0x18>)
 8000bec:	6013      	str	r3, [r2, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	2000004c 	.word	0x2000004c

08000bfc <Get_Tick>:

uint32_t Get_Tick(void){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	return msTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <Get_Tick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	2000004c 	.word	0x2000004c

08000c14 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <LL_InitTick+0x30>)
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <LL_InitTick+0x30>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <LL_InitTick+0x30>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk;                   /* Enable the Systick Timer */
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000c50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ffdd 	bl	8000c14 <LL_InitTick>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <LoopForever+0xe>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <LoopForever+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c92:	f000 f811 	bl	8000cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c96:	f7ff ff73 	bl	8000b80 <main>

08000c9a <LoopForever>:

LoopForever:
    b LoopForever
 8000c9a:	e7fe      	b.n	8000c9a <LoopForever>
  ldr   r0, =_estack
 8000c9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ca8:	08000d20 	.word	0x08000d20
  ldr r2, =_sbss
 8000cac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cb0:	20000050 	.word	0x20000050

08000cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_2_IRQHandler>
	...

08000cb8 <__libc_init_array>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	4d0d      	ldr	r5, [pc, #52]	; (8000cf0 <__libc_init_array+0x38>)
 8000cbc:	4c0d      	ldr	r4, [pc, #52]	; (8000cf4 <__libc_init_array+0x3c>)
 8000cbe:	1b64      	subs	r4, r4, r5
 8000cc0:	10a4      	asrs	r4, r4, #2
 8000cc2:	2600      	movs	r6, #0
 8000cc4:	42a6      	cmp	r6, r4
 8000cc6:	d109      	bne.n	8000cdc <__libc_init_array+0x24>
 8000cc8:	4d0b      	ldr	r5, [pc, #44]	; (8000cf8 <__libc_init_array+0x40>)
 8000cca:	4c0c      	ldr	r4, [pc, #48]	; (8000cfc <__libc_init_array+0x44>)
 8000ccc:	f000 f818 	bl	8000d00 <_init>
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	10a4      	asrs	r4, r4, #2
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	42a6      	cmp	r6, r4
 8000cd8:	d105      	bne.n	8000ce6 <__libc_init_array+0x2e>
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce0:	4798      	blx	r3
 8000ce2:	3601      	adds	r6, #1
 8000ce4:	e7ee      	b.n	8000cc4 <__libc_init_array+0xc>
 8000ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cea:	4798      	blx	r3
 8000cec:	3601      	adds	r6, #1
 8000cee:	e7f2      	b.n	8000cd6 <__libc_init_array+0x1e>
 8000cf0:	08000d18 	.word	0x08000d18
 8000cf4:	08000d18 	.word	0x08000d18
 8000cf8:	08000d18 	.word	0x08000d18
 8000cfc:	08000d1c 	.word	0x08000d1c

08000d00 <_init>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	bf00      	nop
 8000d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d06:	bc08      	pop	{r3}
 8000d08:	469e      	mov	lr, r3
 8000d0a:	4770      	bx	lr

08000d0c <_fini>:
 8000d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0e:	bf00      	nop
 8000d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d12:	bc08      	pop	{r3}
 8000d14:	469e      	mov	lr, r3
 8000d16:	4770      	bx	lr
