
Led_On_Mfshield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000360  08000368  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000360  08000360  00010368  2**0
                  CONTENTS
  4 .ARM          00000000  08000360  08000360  00010368  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000360  08000368  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010368  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010368  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000113  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000048  00000000  00000000  000104ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000026  00000000  00000000  000104f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  00010520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000000a2  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000020  00000000  00000000  00010610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  00010630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000348 	.word	0x08000348

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000348 	.word	0x08000348

080001c8 <main>:
.section .text.main
.type	main,%function
main:

// ACTIVAR EL RELOJ DE LOS PUERTOS A Y B
	ldr r6, =RCC_BASE
 80001c8:	4e36      	ldr	r6, [pc, #216]	; (80002a4 <loop+0xa>)
	ldr r5, [r6,#RCC_AHB2ENR]
 80001ca:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
	orr r5, 0x00000003	// Se coloca un 3 ya que estamos colocando un 1 en el bit 0 y 1 que corresponden a los puertos A Y B
 80001cc:	f045 0503 	orr.w	r5, r5, #3
	str r5, [r6,#RCC_AHB2ENR]
 80001d0:	64f5      	str	r5, [r6, #76]	; 0x4c
// CONFIGURACION PINES MFShield, pines A5, A6, A7, B6

// CONFIGURACION GPIOx_MODER DE LOS PINES

//A5
	ldr r6, =GPIOA_BASE
 80001d2:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_MODER]
 80001d6:	6835      	ldr	r5, [r6, #0]
	orr r5, #(1<<10)          	// Colocamos el bit 10 en 1
 80001d8:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
	bfc r5, #11, #1          	// Colocamos el bit 11 en 0
 80001dc:	f36f 25cb 	bfc	r5, #11, #1
	str r5, [r6,#GPIO_MODER]
 80001e0:	6035      	str	r5, [r6, #0]
//A6
	ldr r6, =GPIOA_BASE
 80001e2:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_MODER]
 80001e6:	6835      	ldr	r5, [r6, #0]
	orr r5, #(1<<12)          	// Colocamos el bit 12 en 1
 80001e8:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
	bfc r5, #13, #1          	// Colocamos el bit 13 en 0
 80001ec:	f36f 354d 	bfc	r5, #13, #1
	str r5, [r6,#GPIO_MODER]
 80001f0:	6035      	str	r5, [r6, #0]
//A7
	ldr r6, =GPIOA_BASE
 80001f2:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_MODER]
 80001f6:	6835      	ldr	r5, [r6, #0]
	orr r5, #(1<<14)          	// Colocamos el bit 14 en 1
 80001f8:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
	bfc r5, #15, #1          	// Colocamos el bit 15 en 0
 80001fc:	f36f 35cf 	bfc	r5, #15, #1
	str r5, [r6,#GPIO_MODER]
 8000200:	6035      	str	r5, [r6, #0]
//B6
	ldr r6, =GPIOB_BASE
 8000202:	4e29      	ldr	r6, [pc, #164]	; (80002a8 <loop+0xe>)
	ldr r5, [r6,#GPIO_MODER]
 8000204:	6835      	ldr	r5, [r6, #0]
	orr r5, #(1<<12)          	// Colocamos el bit 12 en 1
 8000206:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
	bfc r5, #13, #1          	// Colocamos el bit 13 en 0
 800020a:	f36f 354d 	bfc	r5, #13, #1
	str r5, [r6,#GPIO_MODER]
 800020e:	6035      	str	r5, [r6, #0]

///////////////////////////////////////////////////////////////////////////////////
// CONFIGURACION GPIOx_OTYPER DE LOS PINES

//A5
	ldr r6, =GPIOA_BASE
 8000210:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_OTYPER]
 8000214:	6875      	ldr	r5, [r6, #4]
	orr r5, #(1<<5)          	// Colocamos el bit 5 en 1 (configuracion Open-Drain)
 8000216:	f045 0520 	orr.w	r5, r5, #32
	str r5, [r6,#GPIO_OTYPER]
 800021a:	6075      	str	r5, [r6, #4]
//A6
	ldr r6, =GPIOA_BASE
 800021c:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_OTYPER]
 8000220:	6875      	ldr	r5, [r6, #4]
	orr r5, #(1<<6)          	// Colocamos el bit 6 en 1 (configuracion Open-Drain)
 8000222:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	str r5, [r6,#GPIO_OTYPER]
 8000226:	6075      	str	r5, [r6, #4]
//A7
	ldr r6, =GPIOA_BASE
 8000228:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_OTYPER]
 800022c:	6875      	ldr	r5, [r6, #4]
	orr r5, #(1<<7)          	// Colocamos el bit 7 en 1 (configuracion Open-Drain)
 800022e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	str r5, [r6,#GPIO_OTYPER]
 8000232:	6075      	str	r5, [r6, #4]
//B6
	ldr r6, =GPIOB_BASE
 8000234:	4e1c      	ldr	r6, [pc, #112]	; (80002a8 <loop+0xe>)
	ldr r5, [r6,#GPIO_OTYPER]
 8000236:	6875      	ldr	r5, [r6, #4]
	orr r5, #(1<<6)          	// Colocamos el bit 6 en 1 (configuracion Open-Drain)
 8000238:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	str r5, [r6,#GPIO_OTYPER]
 800023c:	6075      	str	r5, [r6, #4]

///////////////////////////////////////////////////////////////////////////////////
// CONFIGURACION GPIOx_PUPDR DE LOS PINES

//A5
	ldr r6, =GPIOA_BASE
 800023e:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_PUPDR]
 8000242:	68f5      	ldr	r5, [r6, #12]
	bfc r5, #10, #2       		// Colocamos el bit 10 y 11  en 0 (configuracion  No pull-up, pull-down)
 8000244:	f36f 258b 	bfc	r5, #10, #2
	str r5, [r6,#GPIO_PUPDR]
 8000248:	60f5      	str	r5, [r6, #12]
//A6
	ldr r6, =GPIOA_BASE
 800024a:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_PUPDR]
 800024e:	68f5      	ldr	r5, [r6, #12]
	bfc r5, #12, #2          	// Colocamos el bit 12 y 13  en 0 (configuracion  No pull-up, pull-down)
 8000250:	f36f 350d 	bfc	r5, #12, #2
	str r5, [r6,#GPIO_PUPDR]
 8000254:	60f5      	str	r5, [r6, #12]
//A7
	ldr r6, =GPIOA_BASE
 8000256:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_PUPDR]
 800025a:	68f5      	ldr	r5, [r6, #12]
	bfc r5, #14, #2            	// Colocamos el bit 14 y 15  en 0 (configuracion  No pull-up, pull-down)
 800025c:	f36f 358f 	bfc	r5, #14, #2
	str r5, [r6,#GPIO_PUPDR]
 8000260:	60f5      	str	r5, [r6, #12]
//B6
	ldr r6, =GPIOB_BASE
 8000262:	4e11      	ldr	r6, [pc, #68]	; (80002a8 <loop+0xe>)
	ldr r5, [r6,#GPIO_PUPDR]
 8000264:	68f5      	ldr	r5, [r6, #12]
	bfc r5, #12, #2         	// Colocamos el bit 12 y 13  en 0 (configuracion  No pull-up, pull-down)
 8000266:	f36f 350d 	bfc	r5, #12, #2
	str r5, [r6,#GPIO_PUPDR]
 800026a:	60f5      	str	r5, [r6, #12]

///////////////////////////////////////////////////////////////////////////////////
// CONFIGURACION GPIOx_ODR DE LOS PINES

//A5
	ldr r6, =GPIOA_BASE
 800026c:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_ODR]
 8000270:	6975      	ldr	r5, [r6, #20]
	bfc r5, #5, #1         	//Colocamos el bit 5 en 0 (High)
 8000272:	f36f 1545 	bfc	r5, #5, #1
	str r5, [r6,#GPIO_ODR]
 8000276:	6175      	str	r5, [r6, #20]
//A6
	ldr r6, =GPIOA_BASE
 8000278:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_ODR]
 800027c:	6975      	ldr	r5, [r6, #20]
	bfc r5, #6, #1           	//Colocamos el bit 6 en 0 (High)
 800027e:	f36f 1586 	bfc	r5, #6, #1
	str r5, [r6,#GPIO_ODR]
 8000282:	6175      	str	r5, [r6, #20]
//A7
	ldr r6, =GPIOA_BASE
 8000284:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ldr r5, [r6,#GPIO_ODR]
 8000288:	6975      	ldr	r5, [r6, #20]
	bfc r5, #7, #1         	//Colocamos el bit 5 en 0 (High)
 800028a:	f36f 15c7 	bfc	r5, #7, #1
	str r5, [r6,#GPIO_ODR]
 800028e:	6175      	str	r5, [r6, #20]
//B6
	ldr r6, =GPIOB_BASE
 8000290:	4e05      	ldr	r6, [pc, #20]	; (80002a8 <loop+0xe>)
	ldr r5, [r6,#GPIO_ODR]
 8000292:	6975      	ldr	r5, [r6, #20]
	bfc r5, #5, #1         	//Colocamos el bit 6 en 0 (High)
 8000294:	f36f 1545 	bfc	r5, #5, #1
	str r5, [r6,#GPIO_ODR]
 8000298:	6175      	str	r5, [r6, #20]

0800029a <loop>:


loop:
	 nop
 800029a:	bf00      	nop
	 nop
 800029c:	bf00      	nop
	 nop
 800029e:	bf00      	nop
	b loop
 80002a0:	e7fb      	b.n	800029a <loop>
 80002a2:	0000      	.short	0x0000
	ldr r6, =RCC_BASE
 80002a4:	40021000 	.word	0x40021000
	ldr r6, =GPIOB_BASE
 80002a8:	48000400 	.word	0x48000400

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f811 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff73 	bl	80001c8 <main>

080002e2 <LoopForever>:

LoopForever:
    b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	2000001c 	.word	0x2000001c

080002fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC1_2_IRQHandler>
	...

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	4d0d      	ldr	r5, [pc, #52]	; (8000338 <__libc_init_array+0x38>)
 8000304:	4c0d      	ldr	r4, [pc, #52]	; (800033c <__libc_init_array+0x3c>)
 8000306:	1b64      	subs	r4, r4, r5
 8000308:	10a4      	asrs	r4, r4, #2
 800030a:	2600      	movs	r6, #0
 800030c:	42a6      	cmp	r6, r4
 800030e:	d109      	bne.n	8000324 <__libc_init_array+0x24>
 8000310:	4d0b      	ldr	r5, [pc, #44]	; (8000340 <__libc_init_array+0x40>)
 8000312:	4c0c      	ldr	r4, [pc, #48]	; (8000344 <__libc_init_array+0x44>)
 8000314:	f000 f818 	bl	8000348 <_init>
 8000318:	1b64      	subs	r4, r4, r5
 800031a:	10a4      	asrs	r4, r4, #2
 800031c:	2600      	movs	r6, #0
 800031e:	42a6      	cmp	r6, r4
 8000320:	d105      	bne.n	800032e <__libc_init_array+0x2e>
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f855 3b04 	ldr.w	r3, [r5], #4
 8000328:	4798      	blx	r3
 800032a:	3601      	adds	r6, #1
 800032c:	e7ee      	b.n	800030c <__libc_init_array+0xc>
 800032e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000332:	4798      	blx	r3
 8000334:	3601      	adds	r6, #1
 8000336:	e7f2      	b.n	800031e <__libc_init_array+0x1e>
 8000338:	08000360 	.word	0x08000360
 800033c:	08000360 	.word	0x08000360
 8000340:	08000360 	.word	0x08000360
 8000344:	08000364 	.word	0x08000364

08000348 <_init>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr

08000354 <_fini>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr
