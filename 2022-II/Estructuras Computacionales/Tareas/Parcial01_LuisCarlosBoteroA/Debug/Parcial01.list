
Parcial01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000270  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f8  080003f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f8  080003f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080003f8  080003f8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f8  080003f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000400  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000001c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000331  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000ae  00000000  00000000  00020371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000005c  00000000  00000000  0002041f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000f0  00000000  00000000  00020480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000152  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000000b0  00000000  00000000  000206c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  00020778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003e0 	.word	0x080003e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080003e0 	.word	0x080003e0

080001c8 <SysTick_Handler>:
.size	DRV_SysTick_Config, .-DRV_SysTick_Config

.section	.text.SysTick_Handler
.type	SysTick_Handler,%function
SysTick_Handler:
	push {lr}
 80001c8:	b500      	push	{lr}
	ldr r0,=uwTick
 80001ca:	4803      	ldr	r0, [pc, #12]	; (80001d8 <SysTick_Handler+0x10>)
	ldr r1,[r0]
 80001cc:	6801      	ldr	r1, [r0, #0]
	add r1,#1
 80001ce:	f101 0101 	add.w	r1, r1, #1
	str r1,[r0]
 80001d2:	6001      	str	r1, [r0, #0]
	pop {pc}
 80001d4:	bd00      	pop	{pc}
 80001d6:	0000      	.short	0x0000
	ldr r0,=uwTick
 80001d8:	20000000 	.word	0x20000000

080001dc <DRV_GPIOx_MODER_Init>:

.section .text.DRV_GPIOx_MODER_Init
.type DRV_GPIOx_MODER_Init,%function
DRV_GPIOx_MODER_Init:

	ldr r3, [r0,#GPIO_MODER]    // Read the content the MODER register to r5
 80001dc:	6803      	ldr	r3, [r0, #0]
	orr r3, r1
 80001de:	ea43 0301 	orr.w	r3, r3, r1
	eor r2,0xffffffff
 80001e2:	f082 32ff 	eor.w	r2, r2, #4294967295
	and r3, r2
 80001e6:	ea03 0302 	and.w	r3, r3, r2

	str r3, [r0,#GPIO_MODER]	// Store result in GPIOA MODER register
 80001ea:	6003      	str	r3, [r0, #0]

	bx lr
 80001ec:	4770      	bx	lr

080001ee <DRV_GPIOx_Set>:

.section .text.DRV_GPIOx_Set
.type	DRV_GPIOx_Set,%function
DRV_GPIOx_Set:
//Set pin A5
	ldr r2, [r0,#GPIO_ODR]    // Read ODR content to r5
 80001ee:	6942      	ldr	r2, [r0, #20]
	orr r2, r1          	// Set P5 (RM0351, page 306)
 80001f0:	ea42 0201 	orr.w	r2, r2, r1
	str r2, [r0,#GPIO_ODR]	// Store result in GPIOA MODER register
 80001f4:	6142      	str	r2, [r0, #20]
	bx lr
 80001f6:	4770      	bx	lr

080001f8 <DRV_GPIOx_Toggle>:

.section .text.DRV_GPIOx_Toggle
.type	DRV_GPIOx_Toggle,%function
DRV_GPIOx_Toggle:
// Led tooggle
	ldr r2, [r0,#GPIO_ODR]    // Read ODR content to r5
 80001f8:	6942      	ldr	r2, [r0, #20]
	eor r2, r1          	// Set P5
 80001fa:	ea82 0201 	eor.w	r2, r2, r1
	str r2, [r0,#GPIO_ODR]	// Store result in GPIOA MODER register
 80001fe:	6142      	str	r2, [r0, #20]
	bx lr
 8000200:	4770      	bx	lr

08000202 <DRV_RCC_AHB2ENR_Init>:
.section .text.DRV_RCC_AHB2ENR_Init
.type	DRV_RCC_AHB2ENR_Init,%function
DRV_RCC_AHB2ENR_Init:

// Enable GPIOA Peripheral Clock (bit 0 in AHB2ENR register) (RM0351, page 251)
	ldr r2, [r0,#RCC_AHB2ENR]   // Read its content to r5
 8000202:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
	orr r2, r1
 8000204:	ea42 0201 	orr.w	r2, r2, r1
	str r2, [r0,#RCC_AHB2ENR]
 8000208:	64c2      	str	r2, [r0, #76]	; 0x4c
	bx lr
 800020a:	4770      	bx	lr

0800020c <DRV_RCC_APB2ENR_Init>:

.section .text.DRV_RCC_APB2ENR_Init
.type	DRV_RCC_APB2ENR_Init,%function
DRV_RCC_APB2ENR_Init:
// Enable SYSCFG Controller Clock (bit 0 in APB2ENR register)
	ldr r2, [r0,RCC_APB2ENR]                // Read its content to r5
 800020c:	6e02      	ldr	r2, [r0, #96]	; 0x60
	orr r2, r1                 // Set   bit 0 to enable SYSCFG clock
 800020e:	ea42 0201 	orr.w	r2, r2, r1
	str r2, [r0,RCC_APB2ENR]                // Store result in peripheral clock register
 8000212:	6602      	str	r2, [r0, #96]	; 0x60
	bx lr
 8000214:	4770      	bx	lr
	...

08000218 <main>:
periodo: 		.word  500

.section .text.main
.type main,%function
main:
	ldr r0,=RCC_BASE
 8000218:	4844      	ldr	r0, [pc, #272]	; (800032c <endledtoggle+0x2>)
	movw r1,0x3 //se puso en 3 porque estamos activando puerto A y B
 800021a:	f240 0103 	movw	r1, #3
	movt r1,0 	// RCC_APB2ENR, SYSCFGEN, RM0351 Pg. 259
 800021e:	f2c0 0100 	movt	r1, #0
	bl DRV_RCC_AHB2ENR_Init
 8000222:	f7ff ffee 	bl	8000202 <DRV_RCC_AHB2ENR_Init>
//SysTick configuration PM0214 Sec. 4.5 SysTick timer (STK) pg. 246
	ldr r0,=RCC_BASE
 8000226:	4841      	ldr	r0, [pc, #260]	; (800032c <endledtoggle+0x2>)
	movw r1,0x1
 8000228:	f240 0101 	movw	r1, #1
	movt r1,0 	// RCC_APB2ENR, SYSCFGEN, RM0351 Pg. 259
 800022c:	f2c0 0100 	movt	r1, #0
	bl DRV_RCC_APB2ENR_Init
 8000230:	f7ff ffec 	bl	800020c <DRV_RCC_APB2ENR_Init>

	// Set SysTick_CTRL to disabLe SysTick IRQ and SysTick timer
	ldr r0, =SysTick_BASE
 8000234:	483e      	ldr	r0, [pc, #248]	; (8000330 <endledtoggle+0x6>)

	// Specify the number of cLock cycles between two interrupts
	ldr r2, =3999 // Change it based on interrupt interval
 8000236:	f640 729f 	movw	r2, #3999	; 0xf9f
	str r2, [r0, #SysTick_LOAD] // Save to SysTick reload register
 800023a:	6042      	str	r2, [r0, #4]

	// Clear SysTick current value register (SysTick_VAL)
	mov r1, #0
 800023c:	f04f 0100 	mov.w	r1, #0
	str r1, [r0, #SysTick_VAL] // Write e to SysTick value register
 8000240:	6081      	str	r1, [r0, #8]

	// Set SysTick_CTRL to enable SysTick timer and SysTick interrupt
	ldr r1, [r0, #SysTick_CTRL]
 8000242:	6801      	ldr	r1, [r0, #0]
	mov r2,#0x00000005
 8000244:	f04f 0205 	mov.w	r2, #5
	orr r1,r1,r2  // Enable SysTick counter & interrupt
 8000248:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r0, #SysTick_CTRL]
 800024c:	6001      	str	r1, [r0, #0]

//A1, A4, A5, A6, A7, A8
	ldr r0,= GPIOA_BASE
 800024e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,0b0101010000000000
 8000252:	f245 4100 	movw	r1, #21504	; 0x5400
	movt r1,0b0000000000000001
 8000256:	f2c0 0101 	movt	r1, #1
	movw r2,0b1010101100001100
 800025a:	f64a 320c 	movw	r2, #43788	; 0xab0c
	movt r2,0b0000000000000010
 800025e:	f2c0 0202 	movt	r2, #2
	bl DRV_GPIOx_MODER_Init
 8000262:	f7ff ffbb 	bl	80001dc <DRV_GPIOx_MODER_Init>

//B0, B4, B5, B6, B8
	ldr r0,= GPIOB_BASE
 8000266:	4833      	ldr	r0, [pc, #204]	; (8000334 <endledtoggle+0xa>)
	movw r1,0b0001010100000000
 8000268:	f241 5100 	movw	r1, #5376	; 0x1500
	movt r1,0b0000000000000001
 800026c:	f2c0 0101 	movt	r1, #1
	movw r2,0b0010101000000011
 8000270:	f642 2203 	movw	r2, #10755	; 0x2a03
	movt r2,0b0000000000000010
 8000274:	f2c0 0202 	movt	r2, #2
	bl DRV_GPIOx_MODER_Init
 8000278:	f7ff ffb0 	bl	80001dc <DRV_GPIOx_MODER_Init>

0800027c <loop>:


loop:
	ldr r0, =SysTick_BASE
 800027c:	482c      	ldr	r0, [pc, #176]	; (8000330 <endledtoggle+0x6>)
	ldr r1, [r0, #SysTick_CTRL]
 800027e:	6801      	ldr	r1, [r0, #0]
	and r1,(1<<16)
 8000280:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	cbz r1,endreadtick
 8000284:	b121      	cbz	r1, 8000290 <endreadtick>
	ldr r0,=current_tick
 8000286:	482c      	ldr	r0, [pc, #176]	; (8000338 <endledtoggle+0xe>)
	ldr r1,[r0]
 8000288:	6801      	ldr	r1, [r0, #0]
	add r1,1
 800028a:	f101 0101 	add.w	r1, r1, #1
	str r1,[r0]
 800028e:	6001      	str	r1, [r0, #0]

08000290 <endreadtick>:

endreadtick:
	ldr r0,=current_tick
 8000290:	4829      	ldr	r0, [pc, #164]	; (8000338 <endledtoggle+0xe>)
	ldr r0,[r0]
 8000292:	6800      	ldr	r0, [r0, #0]
	ldr r1,=last_tick_1
 8000294:	4929      	ldr	r1, [pc, #164]	; (800033c <endledtoggle+0x12>)
	ldr r1,[r1]
 8000296:	6809      	ldr	r1, [r1, #0]
	sub r0,r1
 8000298:	eba0 0001 	sub.w	r0, r0, r1
	ldr r4,=periodo
 800029c:	4c28      	ldr	r4, [pc, #160]	; (8000340 <endledtoggle+0x16>)
	ldr r6,[r4]
 800029e:	6826      	ldr	r6, [r4, #0]
	cmp r0,r6
 80002a0:	42b0      	cmp	r0, r6
	blt endledtoggle
 80002a2:	db42      	blt.n	800032a <endledtoggle>
	ldr r0,=current_tick
 80002a4:	4824      	ldr	r0, [pc, #144]	; (8000338 <endledtoggle+0xe>)
	ldr r0,[r0]
 80002a6:	6800      	ldr	r0, [r0, #0]
	ldr r1,=last_tick_1
 80002a8:	4924      	ldr	r1, [pc, #144]	; (800033c <endledtoggle+0x12>)
    str r0,[r1]
 80002aa:	6008      	str	r0, [r1, #0]

//A5, A6, A7, A8
	ldr r0,=GPIOA_BASE
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,0b111100000
 80002b0:	f240 11e0 	movw	r1, #480	; 0x1e0
	bl DRV_GPIOx_Toggle
 80002b4:	f7ff ffa0 	bl	80001f8 <DRV_GPIOx_Toggle>

//B4, B5, B6, B8
	ldr r0,=GPIOB_BASE
 80002b8:	481e      	ldr	r0, [pc, #120]	; (8000334 <endledtoggle+0xa>)
	movw r1,0b101110000
 80002ba:	f240 1170 	movw	r1, #368	; 0x170
	bl DRV_GPIOx_Toggle
 80002be:	f7ff ff9b 	bl	80001f8 <DRV_GPIOx_Toggle>

//Botones
//B0
	ldr r2, =GPIOB_BASE
 80002c2:	4a1c      	ldr	r2, [pc, #112]	; (8000334 <endledtoggle+0xa>)
	ldr r1, [r2,#GPIO_IDR]
 80002c4:	6911      	ldr	r1, [r2, #16]

	and	r1, r1, #0x0001
 80002c6:	f001 0101 	and.w	r1, r1, #1
	ldr r3, =0x0000
 80002ca:	f04f 0300 	mov.w	r3, #0
	cmp r1, r3
 80002ce:	4299      	cmp	r1, r3
	beq encender_gpioB
 80002d0:	d018      	beq.n	8000304 <encender_gpioB>

//A1
	ldr r2, =GPIOA_BASE
 80002d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
	ldr r1, [r2,#GPIO_IDR]
 80002d6:	6911      	ldr	r1, [r2, #16]

	and	r1, r1, #0x0002
 80002d8:	f001 0102 	and.w	r1, r1, #2
	ldr r3, =0x0000
 80002dc:	f04f 0300 	mov.w	r3, #0
	cmp r1, r3
 80002e0:	4299      	cmp	r1, r3
	beq encender_gpioA
 80002e2:	d008      	beq.n	80002f6 <encender_gpioA>

//A4
	ldr r2, =GPIOA_BASE
 80002e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
	ldr r1, [r2,#GPIO_IDR]
 80002e8:	6911      	ldr	r1, [r2, #16]

	and	r1, r1, #0x0010
 80002ea:	f001 0110 	and.w	r1, r1, #16
	ldr r3, =0x0000
 80002ee:	f04f 0300 	mov.w	r3, #0
	cmp r1, r3
 80002f2:	4299      	cmp	r1, r3
	beq led_on
 80002f4:	d00d      	beq.n	8000312 <led_on>

080002f6 <encender_gpioA>:


encender_gpioA:

	//A5, A6, A7, A8
	ldr r0,=GPIOA_BASE
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,0b111100000
 80002fa:	f240 11e0 	movw	r1, #480	; 0x1e0
	bl DRV_GPIOx_Set
 80002fe:	f7ff ff76 	bl	80001ee <DRV_GPIOx_Set>
	b endledtoggle
 8000302:	e012      	b.n	800032a <endledtoggle>

08000304 <encender_gpioB>:

encender_gpioB:
	//B4, B5, B6, B8
	ldr r0,=GPIOB_BASE
 8000304:	480b      	ldr	r0, [pc, #44]	; (8000334 <endledtoggle+0xa>)
	movw r1,0b101110000
 8000306:	f240 1170 	movw	r1, #368	; 0x170
	bl DRV_GPIOx_Set
 800030a:	f7ff ff70 	bl	80001ee <DRV_GPIOx_Set>
	b endledtoggle
 800030e:	e00c      	b.n	800032a <endledtoggle>
	b endledtoggle
 8000310:	e00b      	b.n	800032a <endledtoggle>

08000312 <led_on>:

led_on:
//A5, A6, A7, A8
	ldr r0,=GPIOA_BASE
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,0b111100000
 8000316:	f240 11e0 	movw	r1, #480	; 0x1e0
	bl DRV_GPIOx_Set
 800031a:	f7ff ff68 	bl	80001ee <DRV_GPIOx_Set>

//B4, B5, B6, B8
	ldr r0,=GPIOB_BASE
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <endledtoggle+0xa>)
	movw r1,0b101110000
 8000320:	f240 1170 	movw	r1, #368	; 0x170
	bl DRV_GPIOx_Set
 8000324:	f7ff ff63 	bl	80001ee <DRV_GPIOx_Set>
	b endledtoggle
 8000328:	e7ff      	b.n	800032a <endledtoggle>

0800032a <endledtoggle>:

endledtoggle:
	b loop
 800032a:	e7a7      	b.n	800027c <loop>
	ldr r0,=RCC_BASE
 800032c:	40021000 	.word	0x40021000
	ldr r0, =SysTick_BASE
 8000330:	e000e010 	.word	0xe000e010
	ldr r0,= GPIOB_BASE
 8000334:	48000400 	.word	0x48000400
	ldr r0,=current_tick
 8000338:	20000004 	.word	0x20000004
	ldr r1,=last_tick_1
 800033c:	20000008 	.word	0x20000008
	ldr r4,=periodo
 8000340:	2000000c 	.word	0x2000000c

08000344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000346:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000348:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	; (8000380 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	; (8000384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	; (8000390 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000372:	f000 f811 	bl	8000398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000376:	f7ff ff4f 	bl	8000218 <main>

0800037a <LoopForever>:

LoopForever:
    b LoopForever
 800037a:	e7fe      	b.n	800037a <LoopForever>
  ldr   r0, =_estack
 800037c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000388:	08000400 	.word	0x08000400
  ldr r2, =_sbss
 800038c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000390:	2000002c 	.word	0x2000002c

08000394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC1_2_IRQHandler>
	...

08000398 <__libc_init_array>:
 8000398:	b570      	push	{r4, r5, r6, lr}
 800039a:	4d0d      	ldr	r5, [pc, #52]	; (80003d0 <__libc_init_array+0x38>)
 800039c:	4c0d      	ldr	r4, [pc, #52]	; (80003d4 <__libc_init_array+0x3c>)
 800039e:	1b64      	subs	r4, r4, r5
 80003a0:	10a4      	asrs	r4, r4, #2
 80003a2:	2600      	movs	r6, #0
 80003a4:	42a6      	cmp	r6, r4
 80003a6:	d109      	bne.n	80003bc <__libc_init_array+0x24>
 80003a8:	4d0b      	ldr	r5, [pc, #44]	; (80003d8 <__libc_init_array+0x40>)
 80003aa:	4c0c      	ldr	r4, [pc, #48]	; (80003dc <__libc_init_array+0x44>)
 80003ac:	f000 f818 	bl	80003e0 <_init>
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	10a4      	asrs	r4, r4, #2
 80003b4:	2600      	movs	r6, #0
 80003b6:	42a6      	cmp	r6, r4
 80003b8:	d105      	bne.n	80003c6 <__libc_init_array+0x2e>
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c0:	4798      	blx	r3
 80003c2:	3601      	adds	r6, #1
 80003c4:	e7ee      	b.n	80003a4 <__libc_init_array+0xc>
 80003c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ca:	4798      	blx	r3
 80003cc:	3601      	adds	r6, #1
 80003ce:	e7f2      	b.n	80003b6 <__libc_init_array+0x1e>
 80003d0:	080003f8 	.word	0x080003f8
 80003d4:	080003f8 	.word	0x080003f8
 80003d8:	080003f8 	.word	0x080003f8
 80003dc:	080003fc 	.word	0x080003fc

080003e0 <_init>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr

080003ec <_fini>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr
