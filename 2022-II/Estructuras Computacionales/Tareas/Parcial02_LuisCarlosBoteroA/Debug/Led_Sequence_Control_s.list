
Led_Sequence_Control_s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000095c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ae4  08000ae4  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ae4  08000ae4  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08000ae4  08000ae4  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ae4  08000ae4  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ae4  08000ae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae8  08000ae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08000aec  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020054  2**0
                  CONTENTS
 10 .bss          0000001c  20000054  20000054  00020054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000070  20000070  00020054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000090a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000d0  00000000  00000000  0002098e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000006e  00000000  00000000  00020a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000278  00000000  00000000  00020ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000017d  00000000  00000000  00020d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000230  00000000  00000000  00020ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  000210f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000acc 	.word	0x08000acc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	08000acc 	.word	0x08000acc

080001c8 <main>:


.section .text.main
.type main,%function
main:
	bl STK_Config_Polling
 80001c8:	f000 fc00 	bl	80009cc <STK_Config_Polling>

	// bl LD2_Init
	// bl B1_Init
	bl MFShield_Sx_Init
 80001cc:	f000 fa54 	bl	8000678 <MFShield_Sx_Init>
	bl MFShield_Dx_Init
 80001d0:	f000 fa74 	bl	80006bc <MFShield_Dx_Init>
	bl BB_Lx_Init
 80001d4:	f000 faac 	bl	8000730 <BB_Lx_Init>

	bl BB_L0_Set
 80001d8:	f000 fb22 	bl	8000820 <BB_L0_Set>
	bl BB_L1_Set
 80001dc:	f000 fb34 	bl	8000848 <BB_L1_Set>
	bl BB_L2_Set
 80001e0:	f000 fb46 	bl	8000870 <BB_L2_Set>
	bl BB_L3_Set
 80001e4:	f000 fb58 	bl	8000898 <BB_L3_Set>
	bl BB_L4_Set
 80001e8:	f000 fb6a 	bl	80008c0 <BB_L4_Set>
	bl BB_L5_Set
 80001ec:	f000 fb78 	bl	80008e0 <BB_L5_Set>
	bl BB_L6_Set
 80001f0:	f000 fb86 	bl	8000900 <BB_L6_Set>
	bl BB_L7_Set
 80001f4:	f000 fb98 	bl	8000928 <BB_L7_Set>

	bl BB_L0_Clear
 80001f8:	f000 fb1c 	bl	8000834 <BB_L0_Clear>
	bl BB_L1_Clear
 80001fc:	f000 fb2e 	bl	800085c <BB_L1_Clear>
	bl BB_L2_Clear
 8000200:	f000 fb40 	bl	8000884 <BB_L2_Clear>
	bl BB_L3_Clear
 8000204:	f000 fb52 	bl	80008ac <BB_L3_Clear>
	bl BB_L4_Clear
 8000208:	f000 fb62 	bl	80008d0 <BB_L4_Clear>
	bl BB_L5_Clear
 800020c:	f000 fb70 	bl	80008f0 <BB_L5_Clear>
	bl BB_L6_Clear
 8000210:	f000 fb80 	bl	8000914 <BB_L6_Clear>
	bl BB_L7_Clear
 8000214:	f000 fb92 	bl	800093c <BB_L7_Clear>

08000218 <loop>:
	// bl LD2_Set
loop:

	bl STK_Polling
 8000218:	f000 fbf4 	bl	8000a04 <STK_Polling>

	bl Update_Inputs
 800021c:	f000 fa04 	bl	8000628 <Update_Inputs>

//	bl FSM_b1_state
	bl FSM_s1_state
 8000220:	f000 f96c 	bl	80004fc <FSM_s1_state>
	bl FSM_s2_state
 8000224:	f000 f98c 	bl	8000540 <FSM_s2_state>
	bl FSM_s3_state
 8000228:	f000 f9ac 	bl	8000584 <FSM_s3_state>

//	bl Update_LD2
	bl Update_D1
 800022c:	f000 f9cc 	bl	80005c8 <Update_D1>
	bl Update_D2
 8000230:	f000 f9da 	bl	80005e8 <Update_D2>
	bl Update_D3
 8000234:	f000 f9e8 	bl	8000608 <Update_D3>

	bl STK_Get_msTick
 8000238:	f000 fbf4 	bl	8000a24 <STK_Get_msTick>
	movw r1,500
 800023c:	f240 11f4 	movw	r1, #500	; 0x1f4
	bl FSM_D4_Blink
 8000240:	f000 f946 	bl	80004d0 <FSM_D4_Blink>



	bl STK_Get_msTick
 8000244:	f000 fbee 	bl	8000a24 <STK_Get_msTick>
	movw r1,100
 8000248:	f240 0164 	movw	r1, #100	; 0x64
	bl FSM_Turn_Left
 800024c:	f000 f80e 	bl	800026c <FSM_Turn_Left>

	bl STK_Get_msTick
 8000250:	f000 fbe8 	bl	8000a24 <STK_Get_msTick>
	movw r1,500
 8000254:	f240 11f4 	movw	r1, #500	; 0x1f4
	bl FSM_Stop
 8000258:	f000 f8f4 	bl	8000444 <FSM_Stop>

	bl STK_Get_msTick
 800025c:	f000 fbe2 	bl	8000a24 <STK_Get_msTick>
	movw r1,100
 8000260:	f240 0164 	movw	r1, #100	; 0x64
	bl FSM_Turn_Right
 8000264:	f000 f878 	bl	8000358 <FSM_Turn_Right>


	b loop
 8000268:	e7d6      	b.n	8000218 <loop>
	...

0800026c <FSM_Turn_Left>:


.section .text.FSM_Turn_Left
.type	FSM_Turn_Left,%function
FSM_Turn_Left:
	push {lr}
 800026c:	b500      	push	{lr}

	mov r4,r0
 800026e:	4604      	mov	r4, r0
	ldr r5,=last_tick_turn_left
 8000270:	4d36      	ldr	r5, [pc, #216]	; (800034c <tl_end_case+0x2>)
	ldr r5,[r5]
 8000272:	682d      	ldr	r5, [r5, #0]
	sub r4,r5
 8000274:	eba4 0405 	sub.w	r4, r4, r5
	cmp r4,r1
 8000278:	428c      	cmp	r4, r1
	blt tl_end_case
 800027a:	db66      	blt.n	800034a <tl_end_case>

	ldr r1,=last_tick_turn_left
 800027c:	4933      	ldr	r1, [pc, #204]	; (800034c <tl_end_case+0x2>)
    str r0,[r1]
 800027e:	6008      	str	r0, [r1, #0]

	ldr r0,=tl_state
 8000280:	4833      	ldr	r0, [pc, #204]	; (8000350 <tl_end_case+0x6>)
	ldr r1,[r0]
 8000282:	6801      	ldr	r1, [r0, #0]
	cmp	r1,0
 8000284:	2900      	cmp	r1, #0
	beq tl_state_0
 8000286:	d010      	beq.n	80002aa <tl_state_0>
	cmp	r1,1
 8000288:	2901      	cmp	r1, #1
	beq tl_state_1
 800028a:	d019      	beq.n	80002c0 <tl_state_1>
	cmp	r1,2
 800028c:	2902      	cmp	r1, #2
	beq tl_state_2
 800028e:	d01e      	beq.n	80002ce <tl_state_2>
	cmp	r1,3
 8000290:	2903      	cmp	r1, #3
	beq tl_state_3
 8000292:	d023      	beq.n	80002dc <tl_state_3>
	cmp	r1,4
 8000294:	2904      	cmp	r1, #4
	beq tl_state_4
 8000296:	d028      	beq.n	80002ea <tl_state_4>
	cmp	r1,5
 8000298:	2905      	cmp	r1, #5
	beq tl_state_5
 800029a:	d02d      	beq.n	80002f8 <tl_state_5>
	cmp	r1,6
 800029c:	2906      	cmp	r1, #6
	beq tl_state_6
 800029e:	d032      	beq.n	8000306 <tl_state_6>
	cmp	r1,7
 80002a0:	2907      	cmp	r1, #7
	beq tl_state_7
 80002a2:	d037      	beq.n	8000314 <tl_state_7>
	cmp	r1,8
 80002a4:	2908      	cmp	r1, #8
	beq tl_state_8
 80002a6:	d03c      	beq.n	8000322 <tl_state_8>
	b tl_end_case
 80002a8:	e04f      	b.n	800034a <tl_end_case>

080002aa <tl_state_0>:

tl_state_0:
	ldr r2,=s1_flag
 80002aa:	4a2a      	ldr	r2, [pc, #168]	; (8000354 <tl_end_case+0xa>)
	ldr r3,[r2]
 80002ac:	6813      	ldr	r3, [r2, #0]
	cmp r3,0
 80002ae:	2b00      	cmp	r3, #0
	beq tl_end_case
 80002b0:	d04b      	beq.n	800034a <tl_end_case>
	bl BB_L0_Set
 80002b2:	f000 fab5 	bl	8000820 <BB_L0_Set>
	ldr r4,=tl_state
 80002b6:	4c26      	ldr	r4, [pc, #152]	; (8000350 <tl_end_case+0x6>)
	mov r5,1
 80002b8:	f04f 0501 	mov.w	r5, #1
	str r5,[r4]
 80002bc:	6025      	str	r5, [r4, #0]
	b tl_end_case
 80002be:	e044      	b.n	800034a <tl_end_case>

080002c0 <tl_state_1>:

tl_state_1:
	bl BB_L1_Set
 80002c0:	f000 fac2 	bl	8000848 <BB_L1_Set>
	ldr r4,=tl_state
 80002c4:	4c22      	ldr	r4, [pc, #136]	; (8000350 <tl_end_case+0x6>)
	mov r5,2
 80002c6:	f04f 0502 	mov.w	r5, #2
	str r5,[r4]
 80002ca:	6025      	str	r5, [r4, #0]
	b tl_end_case
 80002cc:	e03d      	b.n	800034a <tl_end_case>

080002ce <tl_state_2>:


tl_state_2:
	bl BB_L2_Set
 80002ce:	f000 facf 	bl	8000870 <BB_L2_Set>
	ldr r4,=tl_state
 80002d2:	4c1f      	ldr	r4, [pc, #124]	; (8000350 <tl_end_case+0x6>)
	mov r5,3
 80002d4:	f04f 0503 	mov.w	r5, #3
	str r5,[r4]
 80002d8:	6025      	str	r5, [r4, #0]
	b tl_end_case
 80002da:	e036      	b.n	800034a <tl_end_case>

080002dc <tl_state_3>:


tl_state_3:
	bl BB_L3_Set
 80002dc:	f000 fadc 	bl	8000898 <BB_L3_Set>
	ldr r4,=tl_state
 80002e0:	4c1b      	ldr	r4, [pc, #108]	; (8000350 <tl_end_case+0x6>)
	mov r5,4
 80002e2:	f04f 0504 	mov.w	r5, #4
	str r5,[r4]
 80002e6:	6025      	str	r5, [r4, #0]
	b tl_end_case
 80002e8:	e02f      	b.n	800034a <tl_end_case>

080002ea <tl_state_4>:


tl_state_4:
	bl BB_L4_Set
 80002ea:	f000 fae9 	bl	80008c0 <BB_L4_Set>
	ldr r4,=tl_state
 80002ee:	4c18      	ldr	r4, [pc, #96]	; (8000350 <tl_end_case+0x6>)
	mov r5,5
 80002f0:	f04f 0505 	mov.w	r5, #5
	str r5,[r4]
 80002f4:	6025      	str	r5, [r4, #0]
	b tl_end_case
 80002f6:	e028      	b.n	800034a <tl_end_case>

080002f8 <tl_state_5>:

tl_state_5:
	bl BB_L5_Set
 80002f8:	f000 faf2 	bl	80008e0 <BB_L5_Set>
	ldr r4,=tl_state
 80002fc:	4c14      	ldr	r4, [pc, #80]	; (8000350 <tl_end_case+0x6>)
	mov r5,6
 80002fe:	f04f 0506 	mov.w	r5, #6
	str r5,[r4]
 8000302:	6025      	str	r5, [r4, #0]
	b tl_end_case
 8000304:	e021      	b.n	800034a <tl_end_case>

08000306 <tl_state_6>:

tl_state_6:
	bl BB_L6_Set
 8000306:	f000 fafb 	bl	8000900 <BB_L6_Set>
	ldr r4,=tl_state
 800030a:	4c11      	ldr	r4, [pc, #68]	; (8000350 <tl_end_case+0x6>)
	mov r5,7
 800030c:	f04f 0507 	mov.w	r5, #7
	str r5,[r4]
 8000310:	6025      	str	r5, [r4, #0]
	b tl_end_case
 8000312:	e01a      	b.n	800034a <tl_end_case>

08000314 <tl_state_7>:


tl_state_7:
	bl BB_L7_Set
 8000314:	f000 fb08 	bl	8000928 <BB_L7_Set>
	ldr r4,=tl_state
 8000318:	4c0d      	ldr	r4, [pc, #52]	; (8000350 <tl_end_case+0x6>)
	mov r5,8
 800031a:	f04f 0508 	mov.w	r5, #8
	str r5,[r4]
 800031e:	6025      	str	r5, [r4, #0]
	b tl_end_case
 8000320:	e013      	b.n	800034a <tl_end_case>

08000322 <tl_state_8>:


tl_state_8:
	bl BB_L0_Clear
 8000322:	f000 fa87 	bl	8000834 <BB_L0_Clear>
	bl BB_L1_Clear
 8000326:	f000 fa99 	bl	800085c <BB_L1_Clear>
	bl BB_L2_Clear
 800032a:	f000 faab 	bl	8000884 <BB_L2_Clear>
	bl BB_L3_Clear
 800032e:	f000 fabd 	bl	80008ac <BB_L3_Clear>
	bl BB_L4_Clear
 8000332:	f000 facd 	bl	80008d0 <BB_L4_Clear>
	bl BB_L5_Clear
 8000336:	f000 fadb 	bl	80008f0 <BB_L5_Clear>
	bl BB_L6_Clear
 800033a:	f000 faeb 	bl	8000914 <BB_L6_Clear>
	bl BB_L7_Clear
 800033e:	f000 fafd 	bl	800093c <BB_L7_Clear>

	ldr r4,=tl_state
 8000342:	4c03      	ldr	r4, [pc, #12]	; (8000350 <tl_end_case+0x6>)
	mov r5,0
 8000344:	f04f 0500 	mov.w	r5, #0
	str r5,[r4]
 8000348:	6025      	str	r5, [r4, #0]

0800034a <tl_end_case>:

tl_end_case:

	pop {pc}
 800034a:	bd00      	pop	{pc}
	ldr r5,=last_tick_turn_left
 800034c:	20000034 	.word	0x20000034
	ldr r0,=tl_state
 8000350:	20000040 	.word	0x20000040
	ldr r2,=s1_flag
 8000354:	2000001c 	.word	0x2000001c

08000358 <FSM_Turn_Right>:


.section .text.FSM_Turn_Right
.type	FSM_Turn_Right,%function
FSM_Turn_Right:
	push {lr}
 8000358:	b500      	push	{lr}

	mov r4,r0
 800035a:	4604      	mov	r4, r0
	ldr r5,=last_tick_turn_right
 800035c:	4d36      	ldr	r5, [pc, #216]	; (8000438 <tr_end_case+0x2>)
	ldr r5,[r5]
 800035e:	682d      	ldr	r5, [r5, #0]
	sub r4,r5
 8000360:	eba4 0405 	sub.w	r4, r4, r5
	cmp r4,r1
 8000364:	428c      	cmp	r4, r1
	blt tr_end_case
 8000366:	db66      	blt.n	8000436 <tr_end_case>

	ldr r1,=last_tick_turn_right
 8000368:	4933      	ldr	r1, [pc, #204]	; (8000438 <tr_end_case+0x2>)
    str r0,[r1]
 800036a:	6008      	str	r0, [r1, #0]

ldr r0,=tr_state
 800036c:	4833      	ldr	r0, [pc, #204]	; (800043c <tr_end_case+0x6>)
	ldr r1,[r0]
 800036e:	6801      	ldr	r1, [r0, #0]
	cmp	r1,0
 8000370:	2900      	cmp	r1, #0
	beq tr_state_0
 8000372:	d010      	beq.n	8000396 <tr_state_0>
	cmp	r1,1
 8000374:	2901      	cmp	r1, #1
	beq tr_state_1
 8000376:	d019      	beq.n	80003ac <tr_state_1>
	cmp	r1,2
 8000378:	2902      	cmp	r1, #2
	beq tr_state_2
 800037a:	d01e      	beq.n	80003ba <tr_state_2>
	cmp	r1,3
 800037c:	2903      	cmp	r1, #3
	beq tr_state_3
 800037e:	d023      	beq.n	80003c8 <tr_state_3>
	cmp	r1,4
 8000380:	2904      	cmp	r1, #4
	beq tr_state_4
 8000382:	d028      	beq.n	80003d6 <tr_state_4>
	cmp	r1,5
 8000384:	2905      	cmp	r1, #5
	beq tr_state_5
 8000386:	d02d      	beq.n	80003e4 <tr_state_5>
	cmp	r1,6
 8000388:	2906      	cmp	r1, #6
	beq tr_state_6
 800038a:	d032      	beq.n	80003f2 <tr_state_6>
	cmp	r1,7
 800038c:	2907      	cmp	r1, #7
	beq tr_state_7
 800038e:	d037      	beq.n	8000400 <tr_state_7>
	cmp	r1,8
 8000390:	2908      	cmp	r1, #8
	beq tr_state_8
 8000392:	d03c      	beq.n	800040e <tr_state_8>
	b tr_end_case
 8000394:	e04f      	b.n	8000436 <tr_end_case>

08000396 <tr_state_0>:

tr_state_0:
	ldr r2,=s3_flag
 8000396:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <tr_end_case+0xa>)
	ldr r3,[r2]
 8000398:	6813      	ldr	r3, [r2, #0]
	cmp r3,0
 800039a:	2b00      	cmp	r3, #0
	beq tr_end_case
 800039c:	d04b      	beq.n	8000436 <tr_end_case>
	bl BB_L7_Set
 800039e:	f000 fac3 	bl	8000928 <BB_L7_Set>
	ldr r4,=tr_state
 80003a2:	4c26      	ldr	r4, [pc, #152]	; (800043c <tr_end_case+0x6>)
	mov r5,1
 80003a4:	f04f 0501 	mov.w	r5, #1
	str r5,[r4]
 80003a8:	6025      	str	r5, [r4, #0]
	b tr_end_case
 80003aa:	e044      	b.n	8000436 <tr_end_case>

080003ac <tr_state_1>:

tr_state_1:
	bl BB_L6_Set
 80003ac:	f000 faa8 	bl	8000900 <BB_L6_Set>
	ldr r4,=tr_state
 80003b0:	4c22      	ldr	r4, [pc, #136]	; (800043c <tr_end_case+0x6>)
	mov r5,2
 80003b2:	f04f 0502 	mov.w	r5, #2
	str r5,[r4]
 80003b6:	6025      	str	r5, [r4, #0]
	b tr_end_case
 80003b8:	e03d      	b.n	8000436 <tr_end_case>

080003ba <tr_state_2>:


tr_state_2:
	bl BB_L5_Set
 80003ba:	f000 fa91 	bl	80008e0 <BB_L5_Set>
	ldr r4,=tr_state
 80003be:	4c1f      	ldr	r4, [pc, #124]	; (800043c <tr_end_case+0x6>)
	mov r5,3
 80003c0:	f04f 0503 	mov.w	r5, #3
	str r5,[r4]
 80003c4:	6025      	str	r5, [r4, #0]
	b tr_end_case
 80003c6:	e036      	b.n	8000436 <tr_end_case>

080003c8 <tr_state_3>:


tr_state_3:
	bl BB_L4_Set
 80003c8:	f000 fa7a 	bl	80008c0 <BB_L4_Set>
	ldr r4,=tr_state
 80003cc:	4c1b      	ldr	r4, [pc, #108]	; (800043c <tr_end_case+0x6>)
	mov r5,4
 80003ce:	f04f 0504 	mov.w	r5, #4
	str r5,[r4]
 80003d2:	6025      	str	r5, [r4, #0]
	b tr_end_case
 80003d4:	e02f      	b.n	8000436 <tr_end_case>

080003d6 <tr_state_4>:


tr_state_4:
	bl BB_L3_Set
 80003d6:	f000 fa5f 	bl	8000898 <BB_L3_Set>
	ldr r4,=tr_state
 80003da:	4c18      	ldr	r4, [pc, #96]	; (800043c <tr_end_case+0x6>)
	mov r5,5
 80003dc:	f04f 0505 	mov.w	r5, #5
	str r5,[r4]
 80003e0:	6025      	str	r5, [r4, #0]
	b tr_end_case
 80003e2:	e028      	b.n	8000436 <tr_end_case>

080003e4 <tr_state_5>:

tr_state_5:
	bl BB_L2_Set
 80003e4:	f000 fa44 	bl	8000870 <BB_L2_Set>
	ldr r4,=tr_state
 80003e8:	4c14      	ldr	r4, [pc, #80]	; (800043c <tr_end_case+0x6>)
	mov r5,6
 80003ea:	f04f 0506 	mov.w	r5, #6
	str r5,[r4]
 80003ee:	6025      	str	r5, [r4, #0]
	b tr_end_case
 80003f0:	e021      	b.n	8000436 <tr_end_case>

080003f2 <tr_state_6>:

tr_state_6:
	bl BB_L1_Set
 80003f2:	f000 fa29 	bl	8000848 <BB_L1_Set>
	ldr r4,=tr_state
 80003f6:	4c11      	ldr	r4, [pc, #68]	; (800043c <tr_end_case+0x6>)
	mov r5,7
 80003f8:	f04f 0507 	mov.w	r5, #7
	str r5,[r4]
 80003fc:	6025      	str	r5, [r4, #0]
	b tr_end_case
 80003fe:	e01a      	b.n	8000436 <tr_end_case>

08000400 <tr_state_7>:


tr_state_7:
	bl BB_L0_Set
 8000400:	f000 fa0e 	bl	8000820 <BB_L0_Set>
	ldr r4,=tr_state
 8000404:	4c0d      	ldr	r4, [pc, #52]	; (800043c <tr_end_case+0x6>)
	mov r5,8
 8000406:	f04f 0508 	mov.w	r5, #8
	str r5,[r4]
 800040a:	6025      	str	r5, [r4, #0]
	b tr_end_case
 800040c:	e013      	b.n	8000436 <tr_end_case>

0800040e <tr_state_8>:


tr_state_8:
	bl BB_L0_Clear
 800040e:	f000 fa11 	bl	8000834 <BB_L0_Clear>
	bl BB_L1_Clear
 8000412:	f000 fa23 	bl	800085c <BB_L1_Clear>
	bl BB_L2_Clear
 8000416:	f000 fa35 	bl	8000884 <BB_L2_Clear>
	bl BB_L3_Clear
 800041a:	f000 fa47 	bl	80008ac <BB_L3_Clear>
	bl BB_L4_Clear
 800041e:	f000 fa57 	bl	80008d0 <BB_L4_Clear>
	bl BB_L5_Clear
 8000422:	f000 fa65 	bl	80008f0 <BB_L5_Clear>
	bl BB_L6_Clear
 8000426:	f000 fa75 	bl	8000914 <BB_L6_Clear>
	bl BB_L7_Clear
 800042a:	f000 fa87 	bl	800093c <BB_L7_Clear>

	ldr r4,=tr_state
 800042e:	4c03      	ldr	r4, [pc, #12]	; (800043c <tr_end_case+0x6>)
	mov r5,0
 8000430:	f04f 0500 	mov.w	r5, #0
	str r5,[r4]
 8000434:	6025      	str	r5, [r4, #0]

08000436 <tr_end_case>:

tr_end_case:

	pop {pc}
 8000436:	bd00      	pop	{pc}
	ldr r5,=last_tick_turn_right
 8000438:	20000038 	.word	0x20000038
ldr r0,=tr_state
 800043c:	20000044 	.word	0x20000044
	ldr r2,=s3_flag
 8000440:	2000002c 	.word	0x2000002c

08000444 <FSM_Stop>:


.section .text.FSM_Stop
.type	FSM_Stop,%function
FSM_Stop:
	push {lr}
 8000444:	b500      	push	{lr}

	mov r4,r0
 8000446:	4604      	mov	r4, r0
	ldr r5,=last_tick_stop
 8000448:	4d1e      	ldr	r5, [pc, #120]	; (80004c4 <s_end_case+0x4>)
	ldr r5,[r5]
 800044a:	682d      	ldr	r5, [r5, #0]
	sub r4,r5
 800044c:	eba4 0405 	sub.w	r4, r4, r5
	cmp r4,r1
 8000450:	428c      	cmp	r4, r1
	blt s_end_case
 8000452:	db35      	blt.n	80004c0 <s_end_case>

	ldr r1,=last_tick_stop
 8000454:	491b      	ldr	r1, [pc, #108]	; (80004c4 <s_end_case+0x4>)
    str r0,[r1]
 8000456:	6008      	str	r0, [r1, #0]

    ldr r0,=s_state
 8000458:	481b      	ldr	r0, [pc, #108]	; (80004c8 <s_end_case+0x8>)
	ldr r1,[r0]
 800045a:	6801      	ldr	r1, [r0, #0]
	cmp	r1,0
 800045c:	2900      	cmp	r1, #0
	beq s_state_0
 800045e:	d002      	beq.n	8000466 <s_state_0>
	cmp	r1,1
 8000460:	2901      	cmp	r1, #1
	beq s_state_1
 8000462:	d019      	beq.n	8000498 <s_state_1>

	b s_end_case
 8000464:	e02c      	b.n	80004c0 <s_end_case>

08000466 <s_state_0>:

s_state_0:
	ldr r2,=s2_flag
 8000466:	4a19      	ldr	r2, [pc, #100]	; (80004cc <s_end_case+0xc>)
	ldr r3,[r2]
 8000468:	6813      	ldr	r3, [r2, #0]
	cmp r3,0
 800046a:	2b00      	cmp	r3, #0
	beq s_end_case
 800046c:	d028      	beq.n	80004c0 <s_end_case>
	bl BB_L0_Set
 800046e:	f000 f9d7 	bl	8000820 <BB_L0_Set>
	bl BB_L1_Set
 8000472:	f000 f9e9 	bl	8000848 <BB_L1_Set>
	bl BB_L2_Set
 8000476:	f000 f9fb 	bl	8000870 <BB_L2_Set>
	bl BB_L3_Set
 800047a:	f000 fa0d 	bl	8000898 <BB_L3_Set>
	bl BB_L4_Set
 800047e:	f000 fa1f 	bl	80008c0 <BB_L4_Set>
	bl BB_L5_Set
 8000482:	f000 fa2d 	bl	80008e0 <BB_L5_Set>
	bl BB_L6_Set
 8000486:	f000 fa3b 	bl	8000900 <BB_L6_Set>
	bl BB_L7_Set
 800048a:	f000 fa4d 	bl	8000928 <BB_L7_Set>
	ldr r4,=s_state
 800048e:	4c0e      	ldr	r4, [pc, #56]	; (80004c8 <s_end_case+0x8>)
	mov r5,1
 8000490:	f04f 0501 	mov.w	r5, #1
	str r5,[r4]
 8000494:	6025      	str	r5, [r4, #0]
	b s_end_case
 8000496:	e013      	b.n	80004c0 <s_end_case>

08000498 <s_state_1>:

s_state_1:
	bl BB_L0_Clear
 8000498:	f000 f9cc 	bl	8000834 <BB_L0_Clear>
	bl BB_L1_Clear
 800049c:	f000 f9de 	bl	800085c <BB_L1_Clear>
	bl BB_L2_Clear
 80004a0:	f000 f9f0 	bl	8000884 <BB_L2_Clear>
	bl BB_L3_Clear
 80004a4:	f000 fa02 	bl	80008ac <BB_L3_Clear>
	bl BB_L4_Clear
 80004a8:	f000 fa12 	bl	80008d0 <BB_L4_Clear>
	bl BB_L5_Clear
 80004ac:	f000 fa20 	bl	80008f0 <BB_L5_Clear>
	bl BB_L6_Clear
 80004b0:	f000 fa30 	bl	8000914 <BB_L6_Clear>
	bl BB_L7_Clear
 80004b4:	f000 fa42 	bl	800093c <BB_L7_Clear>
	ldr r4,=s_state
 80004b8:	4c03      	ldr	r4, [pc, #12]	; (80004c8 <s_end_case+0x8>)
	mov r5,0
 80004ba:	f04f 0500 	mov.w	r5, #0
	str r5,[r4]
 80004be:	6025      	str	r5, [r4, #0]

080004c0 <s_end_case>:


s_end_case:
	pop {pc}
 80004c0:	bd00      	pop	{pc}
 80004c2:	0000      	.short	0x0000
	ldr r5,=last_tick_stop
 80004c4:	2000003c 	.word	0x2000003c
    ldr r0,=s_state
 80004c8:	20000048 	.word	0x20000048
	ldr r2,=s2_flag
 80004cc:	20000024 	.word	0x20000024

080004d0 <FSM_D4_Blink>:


.section .text.FSM_D4_Blink
.type	FSM_D4_Blink,%function
FSM_D4_Blink:
	push {lr}
 80004d0:	b500      	push	{lr}

	mov r4,r0
 80004d2:	4604      	mov	r4, r0
	ldr r5,=last_tick_d4_blink
 80004d4:	4d07      	ldr	r5, [pc, #28]	; (80004f4 <endledtoggle+0x2>)
	ldr r5,[r5]
 80004d6:	682d      	ldr	r5, [r5, #0]
	sub r4,r5
 80004d8:	eba4 0405 	sub.w	r4, r4, r5
	cmp r4,r1
 80004dc:	428c      	cmp	r4, r1
	blt endledtoggle
 80004de:	db08      	blt.n	80004f2 <endledtoggle>

	ldr r1,=last_tick_d4_blink
 80004e0:	4904      	ldr	r1, [pc, #16]	; (80004f4 <endledtoggle+0x2>)
    str r0,[r1]
 80004e2:	6008      	str	r0, [r1, #0]
	ldr r0,=GPIOB_BASE
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <endledtoggle+0x6>)
	movw r1,(1<<6)
 80004e6:	f240 0140 	movw	r1, #64	; 0x40
	movt r1,0
 80004ea:	f2c0 0100 	movt	r1, #0

	bl GPIO_Toggle
 80004ee:	f000 fa54 	bl	800099a <GPIO_Toggle>

080004f2 <endledtoggle>:

endledtoggle:

	pop {pc}
 80004f2:	bd00      	pop	{pc}
	ldr r5,=last_tick_d4_blink
 80004f4:	20000030 	.word	0x20000030
	ldr r0,=GPIOB_BASE
 80004f8:	48000400 	.word	0x48000400

080004fc <FSM_s1_state>:
.section .text.FSM_s1_state
.type	FSM_s1_state,%function
FSM_s1_state:
// begin_case_b1_state

	ldr r0,=s1_state
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <end_case_s1_state+0x2>)
	ldr r1,[r0]
 80004fe:	6801      	ldr	r1, [r0, #0]
	cmp	r1,0
 8000500:	2900      	cmp	r1, #0
	beq s1_state_0
 8000502:	d002      	beq.n	800050a <s1_state_0>
	cmp r1,1
 8000504:	2901      	cmp	r1, #1
	beq s1_state_1
 8000506:	d008      	beq.n	800051a <s1_state_1>
	b end_case_s1_state
 8000508:	e013      	b.n	8000532 <end_case_s1_state>

0800050a <s1_state_0>:

s1_state_0:
	ldr r2,=s1_pushed
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <end_case_s1_state+0x6>)
	ldr r3,[r2]
 800050c:	6813      	ldr	r3, [r2, #0]
	cmp r3,0
 800050e:	2b00      	cmp	r3, #0
	beq end_s1_state_0
 8000510:	d002      	beq.n	8000518 <end_s1_state_0>
	mov r4,1
 8000512:	f04f 0401 	mov.w	r4, #1
	str r4,[r0]
 8000516:	6004      	str	r4, [r0, #0]

08000518 <end_s1_state_0>:
end_s1_state_0:

	b end_case_s1_state
 8000518:	e00b      	b.n	8000532 <end_case_s1_state>

0800051a <s1_state_1>:

s1_state_1:
	ldr r2,=s1_pushed
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <end_case_s1_state+0x6>)
	ldr r3,[r2]
 800051c:	6813      	ldr	r3, [r2, #0]
	cmp r3,1
 800051e:	2b01      	cmp	r3, #1
	beq end_case_s1_state
 8000520:	d007      	beq.n	8000532 <end_case_s1_state>
	mov r4,0
 8000522:	f04f 0400 	mov.w	r4, #0
	str r4,[r0]
 8000526:	6004      	str	r4, [r0, #0]
	ldr r1,=s1_flag
 8000528:	4904      	ldr	r1, [pc, #16]	; (800053c <end_case_s1_state+0xa>)
	ldr r2,[r1]
 800052a:	680a      	ldr	r2, [r1, #0]
	eor r2,1
 800052c:	f082 0201 	eor.w	r2, r2, #1
	str r2,[r1]
 8000530:	600a      	str	r2, [r1, #0]

08000532 <end_case_s1_state>:
end_case_s1_state:
// end_case_b1_state
	bx lr
 8000532:	4770      	bx	lr
	ldr r0,=s1_state
 8000534:	20000018 	.word	0x20000018
	ldr r2,=s1_pushed
 8000538:	20000004 	.word	0x20000004
	ldr r1,=s1_flag
 800053c:	2000001c 	.word	0x2000001c

08000540 <FSM_s2_state>:
.section .text.FSM_s2_state
.type	FSM_s2_state,%function
FSM_s2_state:
// begin_case_s2_state

	ldr r0,=s2_state
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <end_case_s2_state+0x2>)
	ldr r1,[r0]
 8000542:	6801      	ldr	r1, [r0, #0]
	cmp	r1,0
 8000544:	2900      	cmp	r1, #0
	beq s2_state_0
 8000546:	d002      	beq.n	800054e <s2_state_0>
	cmp r1,1
 8000548:	2901      	cmp	r1, #1
	beq s2_state_1
 800054a:	d008      	beq.n	800055e <s2_state_1>
	b end_case_s2_state
 800054c:	e013      	b.n	8000576 <end_case_s2_state>

0800054e <s2_state_0>:

s2_state_0:
	ldr r2,=s2_pushed
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <end_case_s2_state+0x6>)
	ldr r3,[r2]
 8000550:	6813      	ldr	r3, [r2, #0]
	cmp r3,0
 8000552:	2b00      	cmp	r3, #0
	beq end_s2_state_0
 8000554:	d002      	beq.n	800055c <end_s2_state_0>
	mov r4,1
 8000556:	f04f 0401 	mov.w	r4, #1
	str r4,[r0]
 800055a:	6004      	str	r4, [r0, #0]

0800055c <end_s2_state_0>:
end_s2_state_0:

	b end_case_s2_state
 800055c:	e00b      	b.n	8000576 <end_case_s2_state>

0800055e <s2_state_1>:

s2_state_1:
	ldr r2,=s2_pushed
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <end_case_s2_state+0x6>)
	ldr r3,[r2]
 8000560:	6813      	ldr	r3, [r2, #0]
	cmp r3,1
 8000562:	2b01      	cmp	r3, #1
	beq end_case_s2_state
 8000564:	d007      	beq.n	8000576 <end_case_s2_state>
	mov r4,0
 8000566:	f04f 0400 	mov.w	r4, #0
	str r4,[r0]
 800056a:	6004      	str	r4, [r0, #0]
	ldr r1,=s2_flag
 800056c:	4904      	ldr	r1, [pc, #16]	; (8000580 <end_case_s2_state+0xa>)
	ldr r2,[r1]
 800056e:	680a      	ldr	r2, [r1, #0]
	eor r2,1
 8000570:	f082 0201 	eor.w	r2, r2, #1
	str r2,[r1]
 8000574:	600a      	str	r2, [r1, #0]

08000576 <end_case_s2_state>:
end_case_s2_state:
// end_case_s2_state
	bx lr
 8000576:	4770      	bx	lr
	ldr r0,=s2_state
 8000578:	20000020 	.word	0x20000020
	ldr r2,=s2_pushed
 800057c:	20000008 	.word	0x20000008
	ldr r1,=s2_flag
 8000580:	20000024 	.word	0x20000024

08000584 <FSM_s3_state>:
.section .text.FSM_s3_state
.type	FSM_s3_state,%function
FSM_s3_state:
// begin_case_s3_state

	ldr r0,=s3_state
 8000584:	480d      	ldr	r0, [pc, #52]	; (80005bc <end_case_s3_state+0x2>)
	ldr r1,[r0]
 8000586:	6801      	ldr	r1, [r0, #0]
	cmp	r1,0
 8000588:	2900      	cmp	r1, #0
	beq s3_state_0
 800058a:	d002      	beq.n	8000592 <s3_state_0>
	cmp r1,1
 800058c:	2901      	cmp	r1, #1
	beq s3_state_1
 800058e:	d008      	beq.n	80005a2 <s3_state_1>
	b end_case_s3_state
 8000590:	e013      	b.n	80005ba <end_case_s3_state>

08000592 <s3_state_0>:

s3_state_0:
	ldr r2,=s3_pushed
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <end_case_s3_state+0x6>)
	ldr r3,[r2]
 8000594:	6813      	ldr	r3, [r2, #0]
	cmp r3,0
 8000596:	2b00      	cmp	r3, #0
	beq end_s3_state_0
 8000598:	d002      	beq.n	80005a0 <end_s3_state_0>
	mov r4,1
 800059a:	f04f 0401 	mov.w	r4, #1
	str r4,[r0]
 800059e:	6004      	str	r4, [r0, #0]

080005a0 <end_s3_state_0>:
end_s3_state_0:

	b end_case_s3_state
 80005a0:	e00b      	b.n	80005ba <end_case_s3_state>

080005a2 <s3_state_1>:

s3_state_1:
	ldr r2,=s3_pushed
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <end_case_s3_state+0x6>)
	ldr r3,[r2]
 80005a4:	6813      	ldr	r3, [r2, #0]
	cmp r3,1
 80005a6:	2b01      	cmp	r3, #1
	beq end_case_s3_state
 80005a8:	d007      	beq.n	80005ba <end_case_s3_state>
	mov r4,0
 80005aa:	f04f 0400 	mov.w	r4, #0
	str r4,[r0]
 80005ae:	6004      	str	r4, [r0, #0]
	ldr r1,=s3_flag
 80005b0:	4904      	ldr	r1, [pc, #16]	; (80005c4 <end_case_s3_state+0xa>)
	ldr r2,[r1]
 80005b2:	680a      	ldr	r2, [r1, #0]
	eor r2,1
 80005b4:	f082 0201 	eor.w	r2, r2, #1
	str r2,[r1]
 80005b8:	600a      	str	r2, [r1, #0]

080005ba <end_case_s3_state>:
end_case_s3_state:
// end_case_s3_state
	bx lr
 80005ba:	4770      	bx	lr
	ldr r0,=s3_state
 80005bc:	20000028 	.word	0x20000028
	ldr r2,=s3_pushed
 80005c0:	2000000c 	.word	0x2000000c
	ldr r1,=s3_flag
 80005c4:	2000002c 	.word	0x2000002c

080005c8 <Update_D1>:


.section .text.Update_D1
.type	Update_D1,%function
Update_D1:
	push {lr}
 80005c8:	b500      	push	{lr}
	// Begin Led control
	ldr r0,=s1_flag
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <end_d1_control+0x2>)
	ldr r1,[r0]
 80005cc:	6801      	ldr	r1, [r0, #0]
	cmp r1,0
 80005ce:	2900      	cmp	r1, #0
	beq s1_flag_0
 80005d0:	d002      	beq.n	80005d8 <s1_flag_0>
	cmp r1,1
 80005d2:	2901      	cmp	r1, #1
	beq s1_flag_1
 80005d4:	d003      	beq.n	80005de <s1_flag_1>
	b end_d1_control
 80005d6:	e004      	b.n	80005e2 <end_d1_control>

080005d8 <s1_flag_0>:

s1_flag_0:
	bl D1_Clear
 80005d8:	f000 f8fa 	bl	80007d0 <D1_Clear>
	b end_d1_control
 80005dc:	e001      	b.n	80005e2 <end_d1_control>

080005de <s1_flag_1>:

s1_flag_1:
	bl D1_Set
 80005de:	f000 f8ef 	bl	80007c0 <D1_Set>

080005e2 <end_d1_control>:

end_d1_control:
// End Led Control
	pop {pc}
 80005e2:	bd00      	pop	{pc}
	ldr r0,=s1_flag
 80005e4:	2000001c 	.word	0x2000001c

080005e8 <Update_D2>:
.size Update_D1,.-Update_D1

.section .text.Update_D2
.type	Update_D2,%function
Update_D2:
	push {lr}
 80005e8:	b500      	push	{lr}
	// Begin Led control
	ldr r0,=s2_flag
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <end_d2_control+0x2>)
	ldr r1,[r0]
 80005ec:	6801      	ldr	r1, [r0, #0]
	cmp r1,0
 80005ee:	2900      	cmp	r1, #0
	beq s2_flag_0
 80005f0:	d002      	beq.n	80005f8 <s2_flag_0>
	cmp r1,1
 80005f2:	2901      	cmp	r1, #1
	beq s2_flag_1
 80005f4:	d003      	beq.n	80005fe <s2_flag_1>
	b end_d2_control
 80005f6:	e004      	b.n	8000602 <end_d2_control>

080005f8 <s2_flag_0>:

s2_flag_0:
	bl D2_Clear
 80005f8:	f000 f8fa 	bl	80007f0 <D2_Clear>
	b end_d2_control
 80005fc:	e001      	b.n	8000602 <end_d2_control>

080005fe <s2_flag_1>:

s2_flag_1:
	bl D2_Set
 80005fe:	f000 f8ef 	bl	80007e0 <D2_Set>

08000602 <end_d2_control>:

end_d2_control:
// End Led Control
	pop {pc}
 8000602:	bd00      	pop	{pc}
	ldr r0,=s2_flag
 8000604:	20000024 	.word	0x20000024

08000608 <Update_D3>:
.size Update_D2,.-Update_D2

.section .text.Update_D3
.type	Update_D3,%function
Update_D3:
	push {lr}
 8000608:	b500      	push	{lr}
	// Begin Led control
	ldr r0,=s3_flag
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <end_d3_control+0x2>)
	ldr r1,[r0]
 800060c:	6801      	ldr	r1, [r0, #0]
	cmp r1,0
 800060e:	2900      	cmp	r1, #0
	beq s3_flag_0
 8000610:	d002      	beq.n	8000618 <s3_flag_0>
	cmp r1,1
 8000612:	2901      	cmp	r1, #1
	beq s3_flag_1
 8000614:	d003      	beq.n	800061e <s3_flag_1>
	b end_d3_control
 8000616:	e004      	b.n	8000622 <end_d3_control>

08000618 <s3_flag_0>:

s3_flag_0:
	bl D3_Clear
 8000618:	f000 f8fa 	bl	8000810 <D3_Clear>
	b end_d3_control
 800061c:	e001      	b.n	8000622 <end_d3_control>

0800061e <s3_flag_1>:

s3_flag_1:
	bl D3_Set
 800061e:	f000 f8ef 	bl	8000800 <D3_Set>

08000622 <end_d3_control>:

end_d3_control:
// End Led Control
	pop {pc}
 8000622:	bd00      	pop	{pc}
	ldr r0,=s3_flag
 8000624:	2000002c 	.word	0x2000002c

08000628 <Update_Inputs>:


.section .text.Update_Inputs
.type Update_Inputs,%function
Update_Inputs:
	push {lr}
 8000628:	b500      	push	{lr}

	ldr r0,=GPIOC_BASE
 800062a:	480d      	ldr	r0, [pc, #52]	; (8000660 <Update_Inputs+0x38>)
	movw r1,(1<<13)
 800062c:	f242 0100 	movw	r1, #8192	; 0x2000
	ldr r2,=b1_pushed
 8000630:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <Update_Inputs+0x3c>)
	bl PB_Read
 8000632:	f000 f98d 	bl	8000950 <PB_Read>

	ldr r0,=GPIOA_BASE
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<1)
 800063a:	f240 0102 	movw	r1, #2
	ldr r2,=s1_pushed
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <Update_Inputs+0x40>)
	bl PB_Read
 8000640:	f000 f986 	bl	8000950 <PB_Read>

	ldr r0,=GPIOA_BASE
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<4)
 8000648:	f240 0110 	movw	r1, #16
	ldr r2,=s2_pushed
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <Update_Inputs+0x44>)
	bl PB_Read
 800064e:	f000 f97f 	bl	8000950 <PB_Read>

	ldr r0,=GPIOB_BASE
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <Update_Inputs+0x48>)
	movw r1,(1<<0)
 8000654:	f240 0101 	movw	r1, #1
	ldr r2,=s3_pushed
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <Update_Inputs+0x4c>)
	bl PB_Read
 800065a:	f000 f979 	bl	8000950 <PB_Read>

	pop {pc}
 800065e:	bd00      	pop	{pc}
	ldr r0,=GPIOC_BASE
 8000660:	48000800 	.word	0x48000800
	ldr r2,=b1_pushed
 8000664:	20000000 	.word	0x20000000
	ldr r2,=s1_pushed
 8000668:	20000004 	.word	0x20000004
	ldr r2,=s2_pushed
 800066c:	20000008 	.word	0x20000008
	ldr r0,=GPIOB_BASE
 8000670:	48000400 	.word	0x48000400
	ldr r2,=s3_pushed
 8000674:	2000000c 	.word	0x2000000c

08000678 <MFShield_Sx_Init>:


.section .text.MFShield_Sx_Init
.type MFShield_Sx_Init,%function
MFShield_Sx_Init:
	push {lr}
 8000678:	b500      	push	{lr}
	ldr r0,=RCC_BASE
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MFShield_Sx_Init+0x3c>)
	movw r1,3
 800067c:	f240 0103 	movw	r1, #3
	bl RCC_AHB2ENR_Init
 8000680:	f000 f994 	bl	80009ac <RCC_AHB2ENR_Init>


	ldr r0,=GPIOA_BASE
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,0
 8000688:	f240 0100 	movw	r1, #0
	movt r1,0
 800068c:	f2c0 0100 	movt	r1, #0
	movw r2,0b0000001100001100
 8000690:	f240 320c 	movw	r2, #780	; 0x30c
	movt r2,0
 8000694:	f2c0 0200 	movt	r2, #0
	bl GPIO_MODER_Init
 8000698:	f000 f966 	bl	8000968 <GPIO_MODER_Init>

	ldr r0,=GPIOB_BASE
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <MFShield_Sx_Init+0x40>)
	movw r1,0
 800069e:	f240 0100 	movw	r1, #0
	movt r1,0
 80006a2:	f2c0 0100 	movt	r1, #0
	movw r2,0b0000000000000011
 80006a6:	f240 0203 	movw	r2, #3
	movt r2,0
 80006aa:	f2c0 0200 	movt	r2, #0
	bl GPIO_MODER_Init
 80006ae:	f000 f95b 	bl	8000968 <GPIO_MODER_Init>


	pop {pc}
 80006b2:	bd00      	pop	{pc}
	ldr r0,=RCC_BASE
 80006b4:	40021000 	.word	0x40021000
	ldr r0,=GPIOB_BASE
 80006b8:	48000400 	.word	0x48000400

080006bc <MFShield_Dx_Init>:
.size MFShield_Sx_Init,.-MFShield_Sx_Init

.section .text.MFShield_Dx_Init
.type MFShield_Dx_Init,%function
MFShield_Dx_Init:
	push {lr}
 80006bc:	b500      	push	{lr}

	ldr r0,=RCC_BASE
 80006be:	481a      	ldr	r0, [pc, #104]	; (8000728 <MFShield_Dx_Init+0x6c>)
	movw r1,1
 80006c0:	f240 0101 	movw	r1, #1
	bl RCC_AHB2ENR_Init
 80006c4:	f000 f972 	bl	80009ac <RCC_AHB2ENR_Init>

	ldr r0,=GPIOA_BASE
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<10)
 80006cc:	f240 4100 	movw	r1, #1024	; 0x400
	movw r2,(1<<11)
 80006d0:	f640 0200 	movw	r2, #2048	; 0x800
	bl GPIO_MODER_Init
 80006d4:	f000 f948 	bl	8000968 <GPIO_MODER_Init>

	ldr r0,=GPIOA_BASE
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,0
 80006dc:	f240 0100 	movw	r1, #0
	movw r2,(1<<5)
 80006e0:	f240 0220 	movw	r2, #32
	bl GPIO_OTYPER_Init
 80006e4:	f000 f94e 	bl	8000984 <GPIO_OTYPER_Init>

	ldr r0,=GPIOA_BASE
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<10)
 80006ec:	f240 4100 	movw	r1, #1024	; 0x400
	movw r2,(1<<11)
 80006f0:	f640 0200 	movw	r2, #2048	; 0x800
	bl GPIO_PUPDR_Init
 80006f4:	f000 f93f 	bl	8000976 <GPIO_PUPDR_Init>

	ldr r0,=GPIOA_BASE
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<12)
 80006fc:	f241 0100 	movw	r1, #4096	; 0x1000
	movw r2,(1<<13)
 8000700:	f242 0200 	movw	r2, #8192	; 0x2000
	bl GPIO_MODER_Init
 8000704:	f000 f930 	bl	8000968 <GPIO_MODER_Init>

	ldr r0,=GPIOA_BASE
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<14)
 800070c:	f244 0100 	movw	r1, #16384	; 0x4000
	movw r2,(1<<15)
 8000710:	f248 0200 	movw	r2, #32768	; 0x8000
	bl GPIO_MODER_Init
 8000714:	f000 f928 	bl	8000968 <GPIO_MODER_Init>

	ldr r0,=GPIOB_BASE
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MFShield_Dx_Init+0x70>)
	movw r1,(1<<12)
 800071a:	f241 0100 	movw	r1, #4096	; 0x1000
	movw r2,(1<<13)
 800071e:	f242 0200 	movw	r2, #8192	; 0x2000
	bl GPIO_MODER_Init
 8000722:	f000 f921 	bl	8000968 <GPIO_MODER_Init>

	pop {pc}
 8000726:	bd00      	pop	{pc}
	ldr r0,=RCC_BASE
 8000728:	40021000 	.word	0x40021000
	ldr r0,=GPIOB_BASE
 800072c:	48000400 	.word	0x48000400

08000730 <BB_Lx_Init>:

.section .text.BB_Lx_Init
.type BB_Lx_Init,%function
BB_Lx_Init:
	//A:8,9 B:3,4,5,8,9,10
	push {lr}
 8000730:	b500      	push	{lr}

	ldr r0,=RCC_BASE
 8000732:	4821      	ldr	r0, [pc, #132]	; (80007b8 <BB_Lx_Init+0x88>)
	movw r1,0b11
 8000734:	f240 0103 	movw	r1, #3
	bl RCC_AHB2ENR_Init
 8000738:	f000 f938 	bl	80009ac <RCC_AHB2ENR_Init>

	ldr r0,=GPIOA_BASE
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,0
 8000740:	f240 0100 	movw	r1, #0
	movt r1,0b0000000000000101
 8000744:	f2c0 0105 	movt	r1, #5
	movw r2,0
 8000748:	f240 0200 	movw	r2, #0
	movt r2,0b0000000000001010
 800074c:	f2c0 020a 	movt	r2, #10
	bl GPIO_MODER_Init
 8000750:	f000 f90a 	bl	8000968 <GPIO_MODER_Init>

	ldr r0,=GPIOA_BASE
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,0b0000001100000000
 8000758:	f240 3100 	movw	r1, #768	; 0x300
	movw r2,0
 800075c:	f240 0200 	movw	r2, #0
	bl GPIO_OTYPER_Init
 8000760:	f000 f910 	bl	8000984 <GPIO_OTYPER_Init>

	ldr r0,=GPIOA_BASE
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,0
 8000768:	f240 0100 	movw	r1, #0
	movt r1,0b0000000000000101
 800076c:	f2c0 0105 	movt	r1, #5
	movw r2,0
 8000770:	f240 0200 	movw	r2, #0
	movt r2,0b0000000000001010
 8000774:	f2c0 020a 	movt	r2, #10
	bl GPIO_PUPDR_Init
 8000778:	f000 f8fd 	bl	8000976 <GPIO_PUPDR_Init>

	ldr r0,=GPIOB_BASE
 800077c:	480f      	ldr	r0, [pc, #60]	; (80007bc <BB_Lx_Init+0x8c>)
	movw r1,0b0000010101000000
 800077e:	f240 5140 	movw	r1, #1344	; 0x540
	movt r1,0b0000000000010101
 8000782:	f2c0 0115 	movt	r1, #21
	movw r2,0b0000101010000000
 8000786:	f640 2280 	movw	r2, #2688	; 0xa80
	movt r2,0b0000000000101010
 800078a:	f2c0 022a 	movt	r2, #42	; 0x2a
	bl GPIO_MODER_Init
 800078e:	f000 f8eb 	bl	8000968 <GPIO_MODER_Init>

	ldr r0,=GPIOB_BASE
 8000792:	480a      	ldr	r0, [pc, #40]	; (80007bc <BB_Lx_Init+0x8c>)
	movw r1,0b0000011100111000
 8000794:	f240 7138 	movw	r1, #1848	; 0x738
	movw r2,0
 8000798:	f240 0200 	movw	r2, #0
	bl GPIO_OTYPER_Init
 800079c:	f000 f8f2 	bl	8000984 <GPIO_OTYPER_Init>

	ldr r0,=GPIOB_BASE
 80007a0:	4806      	ldr	r0, [pc, #24]	; (80007bc <BB_Lx_Init+0x8c>)
	movw r1,0b0000010101000000
 80007a2:	f240 5140 	movw	r1, #1344	; 0x540
	movt r1,0b0000000000010101
 80007a6:	f2c0 0115 	movt	r1, #21
	movw r2,0b0000101010000000
 80007aa:	f640 2280 	movw	r2, #2688	; 0xa80
	movt r2,0b0000000000101010
 80007ae:	f2c0 022a 	movt	r2, #42	; 0x2a
	bl GPIO_PUPDR_Init
 80007b2:	f000 f8e0 	bl	8000976 <GPIO_PUPDR_Init>

	pop {pc}
 80007b6:	bd00      	pop	{pc}
	ldr r0,=RCC_BASE
 80007b8:	40021000 	.word	0x40021000
	ldr r0,=GPIOB_BASE
 80007bc:	48000400 	.word	0x48000400

080007c0 <D1_Set>:


.section .text.D1_Set
.type D1_Set,%function
D1_Set:
	push {lr}
 80007c0:	b500      	push	{lr}

	ldr r0,=GPIOA_BASE
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<5)
 80007c6:	f240 0120 	movw	r1, #32
	bl GPIO_Clear
 80007ca:	f000 f8e4 	bl	8000996 <GPIO_Clear>

	pop {pc}
 80007ce:	bd00      	pop	{pc}

080007d0 <D1_Clear>:
.size D1_Set,.-D1_Set

.section .text.D1_Clear
.type D1_Clear,%function
D1_Clear:
	push {lr}
 80007d0:	b500      	push	{lr}

	ldr r0,=GPIOA_BASE
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<5)
 80007d6:	f240 0120 	movw	r1, #32
	bl GPIO_Set
 80007da:	f000 f8da 	bl	8000992 <GPIO_Set>

	pop {pc}
 80007de:	bd00      	pop	{pc}

080007e0 <D2_Set>:
.size D1_Clear,.-D1_Clear

.section .text.D2_Set
.type D2_Set,%function
D2_Set:
	push {lr}
 80007e0:	b500      	push	{lr}

	ldr r0,=GPIOA_BASE
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<6)
 80007e6:	f240 0140 	movw	r1, #64	; 0x40
	bl GPIO_Set
 80007ea:	f000 f8d2 	bl	8000992 <GPIO_Set>

	pop {pc}
 80007ee:	bd00      	pop	{pc}

080007f0 <D2_Clear>:
.size D2_Set,.-D2_Set

.section .text.D2_Clear
.type D2_Clear,%function
D2_Clear:
	push {lr}
 80007f0:	b500      	push	{lr}

	ldr r0,=GPIOA_BASE
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<6)
 80007f6:	f240 0140 	movw	r1, #64	; 0x40
	bl GPIO_Clear
 80007fa:	f000 f8cc 	bl	8000996 <GPIO_Clear>

	pop {pc}
 80007fe:	bd00      	pop	{pc}

08000800 <D3_Set>:
.size D2_Clear,.-D2_Clear

.section .text.D3_Set
.type D3_Set,%function
D3_Set:
	push {lr}
 8000800:	b500      	push	{lr}

	ldr r0,=GPIOA_BASE
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<7)
 8000806:	f240 0180 	movw	r1, #128	; 0x80
	bl GPIO_Set
 800080a:	f000 f8c2 	bl	8000992 <GPIO_Set>

	pop {pc}
 800080e:	bd00      	pop	{pc}

08000810 <D3_Clear>:
.size D3_Set,.-D3_Set

.section .text.D3_Clear
.type D3_Clear,%function
D3_Clear:
	push {lr}
 8000810:	b500      	push	{lr}

	ldr r0,=GPIOA_BASE
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<7)
 8000816:	f240 0180 	movw	r1, #128	; 0x80
	bl GPIO_Clear
 800081a:	f000 f8bc 	bl	8000996 <GPIO_Clear>

	pop {pc}
 800081e:	bd00      	pop	{pc}

08000820 <BB_L0_Set>:


.section .text.BB_L0_Set
.type BB_L0_Set,%function
BB_L0_Set:
	push {lr}
 8000820:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <BB_L0_Set+0x10>)
	movw r1,(1<<3)
 8000824:	f240 0108 	movw	r1, #8
	bl GPIO_Clear
 8000828:	f000 f8b5 	bl	8000996 <GPIO_Clear>

	pop {pc}
 800082c:	bd00      	pop	{pc}
 800082e:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 8000830:	48000400 	.word	0x48000400

08000834 <BB_L0_Clear>:
.size BB_L0_Set,.-BB_L0_Set

.section .text.BB_L0_Clear
.type BB_L0_Clear,%function
BB_L0_Clear:
	push {lr}
 8000834:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <BB_L0_Clear+0x10>)
	movw r1,(1<<3)
 8000838:	f240 0108 	movw	r1, #8
	bl GPIO_Set
 800083c:	f000 f8a9 	bl	8000992 <GPIO_Set>

	pop {pc}
 8000840:	bd00      	pop	{pc}
 8000842:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 8000844:	48000400 	.word	0x48000400

08000848 <BB_L1_Set>:
.size BB_L0_Clear,.-BB_L0_Clear

.section .text.BB_L1_Set
.type BB_L1_Set,%function
BB_L1_Set:
	push {lr}
 8000848:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 800084a:	4803      	ldr	r0, [pc, #12]	; (8000858 <BB_L1_Set+0x10>)
	movw r1,(1<<5)
 800084c:	f240 0120 	movw	r1, #32
	bl GPIO_Clear
 8000850:	f000 f8a1 	bl	8000996 <GPIO_Clear>

	pop {pc}
 8000854:	bd00      	pop	{pc}
 8000856:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 8000858:	48000400 	.word	0x48000400

0800085c <BB_L1_Clear>:
.size BB_L1_Set,.-BB_L1_Set

.section .text.BB_L1_Clear
.type BB_L1_Clear,%function
BB_L1_Clear:
	push {lr}
 800085c:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <BB_L1_Clear+0x10>)
	movw r1,(1<<5)
 8000860:	f240 0120 	movw	r1, #32
	bl GPIO_Set
 8000864:	f000 f895 	bl	8000992 <GPIO_Set>

	pop {pc}
 8000868:	bd00      	pop	{pc}
 800086a:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 800086c:	48000400 	.word	0x48000400

08000870 <BB_L2_Set>:
.size BB_L1_Clear,.-BB_L1_Clear

.section .text.BB_L2_Set
.type BB_L2_Set,%function
BB_L2_Set:
	push {lr}
 8000870:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <BB_L2_Set+0x10>)
	movw r1,(1<<4)
 8000874:	f240 0110 	movw	r1, #16
	bl GPIO_Clear
 8000878:	f000 f88d 	bl	8000996 <GPIO_Clear>

	pop {pc}
 800087c:	bd00      	pop	{pc}
 800087e:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 8000880:	48000400 	.word	0x48000400

08000884 <BB_L2_Clear>:
.size BB_L2_Set,.-BB_L2_Set

.section .text.BB_L2_Clear
.type BB_L2_Clear,%function
BB_L2_Clear:
	push {lr}
 8000884:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 8000886:	4803      	ldr	r0, [pc, #12]	; (8000894 <BB_L2_Clear+0x10>)
	movw r1,(1<<4)
 8000888:	f240 0110 	movw	r1, #16
	bl GPIO_Set
 800088c:	f000 f881 	bl	8000992 <GPIO_Set>

	pop {pc}
 8000890:	bd00      	pop	{pc}
 8000892:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 8000894:	48000400 	.word	0x48000400

08000898 <BB_L3_Set>:
.size BB_L2_Clear,.-BB_L2_Clear

.section .text.BB_L3_Set
.type BB_L3_Set,%function
BB_L3_Set:
	push {lr}
 8000898:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <BB_L3_Set+0x10>)
	movw r1,(1<<10)
 800089c:	f240 4100 	movw	r1, #1024	; 0x400
	bl GPIO_Clear
 80008a0:	f000 f879 	bl	8000996 <GPIO_Clear>

	pop {pc}
 80008a4:	bd00      	pop	{pc}
 80008a6:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 80008a8:	48000400 	.word	0x48000400

080008ac <BB_L3_Clear>:
.size BB_L3_Set,.-BB_L3_Set

.section .text.BB_L3_Clear
.type BB_L3_Clear,%function
BB_L3_Clear:
	push {lr}
 80008ac:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <BB_L3_Clear+0x10>)
	movw r1,(1<<10)
 80008b0:	f240 4100 	movw	r1, #1024	; 0x400
	bl GPIO_Set
 80008b4:	f000 f86d 	bl	8000992 <GPIO_Set>

	pop {pc}
 80008b8:	bd00      	pop	{pc}
 80008ba:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 80008bc:	48000400 	.word	0x48000400

080008c0 <BB_L4_Set>:
.size BB_L3_Clear,.-BB_L3_Clear

.section .text.BB_L4_Set
.type BB_L4_Set,%function
BB_L4_Set:
	push {lr}
 80008c0:	b500      	push	{lr}

	ldr r0,=GPIOA_BASE
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<8)
 80008c6:	f240 1100 	movw	r1, #256	; 0x100
	bl GPIO_Clear
 80008ca:	f000 f864 	bl	8000996 <GPIO_Clear>

	pop {pc}
 80008ce:	bd00      	pop	{pc}

080008d0 <BB_L4_Clear>:
.size BB_L4_Set,.-BB_L4_Set

.section .text.BB_L4_Clear
.type BB_L4_Clear,%function
BB_L4_Clear:
	push {lr}
 80008d0:	b500      	push	{lr}

	ldr r0,=GPIOA_BASE
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<8)
 80008d6:	f240 1100 	movw	r1, #256	; 0x100
	bl GPIO_Set
 80008da:	f000 f85a 	bl	8000992 <GPIO_Set>

	pop {pc}
 80008de:	bd00      	pop	{pc}

080008e0 <BB_L5_Set>:
.size BB_L4_Clear,.-BB_L4_Clear

.section .text.BB_L5_Set
.type BB_L5_Set,%function
BB_L5_Set:
	push {lr}
 80008e0:	b500      	push	{lr}

	ldr r0,=GPIOA_BASE
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<9)
 80008e6:	f240 2100 	movw	r1, #512	; 0x200
	bl GPIO_Clear
 80008ea:	f000 f854 	bl	8000996 <GPIO_Clear>

	pop {pc}
 80008ee:	bd00      	pop	{pc}

080008f0 <BB_L5_Clear>:
.size BB_L5_Set,.-BB_L5_Set

.section .text.BB_L5_Clear
.type BB_L5_Clear,%function
BB_L5_Clear:
	push {lr}
 80008f0:	b500      	push	{lr}

	ldr r0,=GPIOA_BASE
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<9)
 80008f6:	f240 2100 	movw	r1, #512	; 0x200
	bl GPIO_Set
 80008fa:	f000 f84a 	bl	8000992 <GPIO_Set>

	pop {pc}
 80008fe:	bd00      	pop	{pc}

08000900 <BB_L6_Set>:
.size BB_L5_Clear,.-BB_L5_Clear

.section .text.BB_L6_Set
.type BB_L6_Set,%function
BB_L6_Set:
	push {lr}
 8000900:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <BB_L6_Set+0x10>)
	movw r1,(1<<9)
 8000904:	f240 2100 	movw	r1, #512	; 0x200
	bl GPIO_Clear
 8000908:	f000 f845 	bl	8000996 <GPIO_Clear>

	pop {pc}
 800090c:	bd00      	pop	{pc}
 800090e:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 8000910:	48000400 	.word	0x48000400

08000914 <BB_L6_Clear>:
.size BB_L6_Set,.-BB_L6_Set

.section .text.BB_L6_Clear
.type BB_L6_Clear,%function
BB_L6_Clear:
	push {lr}
 8000914:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 8000916:	4803      	ldr	r0, [pc, #12]	; (8000924 <BB_L6_Clear+0x10>)
	movw r1,(1<<9)
 8000918:	f240 2100 	movw	r1, #512	; 0x200
	bl GPIO_Set
 800091c:	f000 f839 	bl	8000992 <GPIO_Set>

	pop {pc}
 8000920:	bd00      	pop	{pc}
 8000922:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 8000924:	48000400 	.word	0x48000400

08000928 <BB_L7_Set>:
.size BB_L6_Clear,.-BB_L6_Clear

.section .text.BB_L7_Set
.type BB_L7_Set,%function
BB_L7_Set:
	push {lr}
 8000928:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <BB_L7_Set+0x10>)
	movw r1,(1<<8)
 800092c:	f240 1100 	movw	r1, #256	; 0x100
	bl GPIO_Clear
 8000930:	f000 f831 	bl	8000996 <GPIO_Clear>

	pop {pc}
 8000934:	bd00      	pop	{pc}
 8000936:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 8000938:	48000400 	.word	0x48000400

0800093c <BB_L7_Clear>:
.size BB_L7_Set,.-BB_L7_Set

.section .text.BB_L7_Clear
.type BB_L7_Clear,%function
BB_L7_Clear:
	push {lr}
 800093c:	b500      	push	{lr}

	ldr r0,=GPIOB_BASE
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <BB_L7_Clear+0x10>)
	movw r1,(1<<8)
 8000940:	f240 1100 	movw	r1, #256	; 0x100
	bl GPIO_Set
 8000944:	f000 f825 	bl	8000992 <GPIO_Set>

	pop {pc}
 8000948:	bd00      	pop	{pc}
 800094a:	0000      	.short	0x0000
	ldr r0,=GPIOB_BASE
 800094c:	48000400 	.word	0x48000400

08000950 <PB_Read>:


.section .text.PB_Read
.type PB_Read,%function
PB_Read:
	push {lr}
 8000950:	b500      	push	{lr}
	push {r2}
 8000952:	b404      	push	{r2}
//	ldr r0,=GPIOC_BASE
//	movw r1,(1<<13)
	bl GPIO_Read
 8000954:	f000 f826 	bl	80009a4 <GPIO_Read>

// if_b1_read:
	pop {r2}
 8000958:	bc04      	pop	{r2}
	mov r1,0
 800095a:	f04f 0100 	mov.w	r1, #0
	cbz r0,PB_Read_end_if
 800095e:	b108      	cbz	r0, 8000964 <PB_Read_end_if>
	mov r1,1
 8000960:	f04f 0101 	mov.w	r1, #1

08000964 <PB_Read_end_if>:
PB_Read_end_if:
    str r1,[r2]
 8000964:	6011      	str	r1, [r2, #0]



	pop {pc}
 8000966:	bd00      	pop	{pc}

08000968 <GPIO_MODER_Init>:


.section .text.GPIO_MODER_Init
.type 	GPIO_MODER_Init,%function
GPIO_MODER_Init:
	ldr r4,[r0,GPIO_MODER]
 8000968:	6804      	ldr	r4, [r0, #0]
	orr r4,r1
 800096a:	ea44 0401 	orr.w	r4, r4, r1
	bic r4,r2
 800096e:	ea24 0402 	bic.w	r4, r4, r2
	str r4,[r0,GPIO_MODER]
 8000972:	6004      	str	r4, [r0, #0]
	bx lr
 8000974:	4770      	bx	lr

08000976 <GPIO_PUPDR_Init>:


.section .text.GPIO_PUPDR_Init
.type 	GPIO_PUPDR_Init,%function
GPIO_PUPDR_Init:
	ldr r4,[r0,GPIO_PUPDR]
 8000976:	68c4      	ldr	r4, [r0, #12]
	orr r4,r1
 8000978:	ea44 0401 	orr.w	r4, r4, r1
	bic r4,r2
 800097c:	ea24 0402 	bic.w	r4, r4, r2
	str r4,[r0,GPIO_PUPDR]
 8000980:	60c4      	str	r4, [r0, #12]
	bx lr
 8000982:	4770      	bx	lr

08000984 <GPIO_OTYPER_Init>:
.size	GPIO_PUPDR_Init,.-GPIO_PUPDR_Init

.section .text.GPIO_OTYPER_Init
.type 	GPIO_OTYPER_Init,%function
GPIO_OTYPER_Init:
	ldr r4,[r0,GPIO_OTYPER]
 8000984:	6844      	ldr	r4, [r0, #4]
	orr r4,r1
 8000986:	ea44 0401 	orr.w	r4, r4, r1
	bic r4,r2
 800098a:	ea24 0402 	bic.w	r4, r4, r2
	str r4,[r0,GPIO_OTYPER]
 800098e:	6044      	str	r4, [r0, #4]
	bx lr
 8000990:	4770      	bx	lr

08000992 <GPIO_Set>:
	// Read Output Data Register (ODR)
	// for port in r0.
	//ldr r4,[r0,GPIO_ODR]
	//orr r4,r1
	//str r4,[r0,GPIO_ODR]
	str r1,[r0,GPIO_BSRR]
 8000992:	6181      	str	r1, [r0, #24]
	bx lr
 8000994:	4770      	bx	lr

08000996 <GPIO_Clear>:
	// Read Output Data Register (ODR)
	// for port in r0.
	//ldr r4,[r0,GPIO_ODR]
	//orr r4,r1
	//str r4,[r0,GPIO_ODR]
	str r1,[r0,GPIO_BRR]
 8000996:	6281      	str	r1, [r0, #40]	; 0x28
	bx lr
 8000998:	4770      	bx	lr

0800099a <GPIO_Toggle>:
.section .text.GPIO_Toggle
.type 	GPIO_Toggle,%function
GPIO_Toggle:
	// Read Output Data Register (ODR)
	// for port in r0.
	ldr r4,[r0,GPIO_ODR]
 800099a:	6944      	ldr	r4, [r0, #20]
	eor r4,r1
 800099c:	ea84 0401 	eor.w	r4, r4, r1
	str r4,[r0,GPIO_ODR]
 80009a0:	6144      	str	r4, [r0, #20]

	bx lr
 80009a2:	4770      	bx	lr

080009a4 <GPIO_Read>:
.section .text.GPIO_Read
.type 	GPIO_Read,%function
GPIO_Read:
	// Read Input Data Register (IDR)
	// for port in R0 and pin in R1
	ldr r0,[r0,GPIO_IDR]
 80009a4:	6900      	ldr	r0, [r0, #16]
	and r0,r1
 80009a6:	ea00 0001 	and.w	r0, r0, r1
	bx lr
 80009aa:	4770      	bx	lr

080009ac <RCC_AHB2ENR_Init>:
.include "stm32l476_msp_rcc_h.s"

.section .text.RCC_AHB2ENR_Init
.type 	RCC_AHB2ENR_Init,%function
RCC_AHB2ENR_Init:
	ldr r4,[r0,RCC_AHB2ENR]
 80009ac:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	orr r4,r1
 80009ae:	ea44 0401 	orr.w	r4, r4, r1
	str r4,[r0,RCC_AHB2ENR]
 80009b2:	64c4      	str	r4, [r0, #76]	; 0x4c
	bx lr
 80009b4:	4770      	bx	lr
	...

080009b8 <SysTick_Handler>:
.size	SysTick_Config, .-SysTick_Config

.section	.text.SysTick_Handler
.type	SysTick_Handler,%function
SysTick_Handler:
	push {lr}
 80009b8:	b500      	push	{lr}
	ldr r0,=uwTick
 80009ba:	4803      	ldr	r0, [pc, #12]	; (80009c8 <SysTick_Handler+0x10>)
	ldr r1,[r0]
 80009bc:	6801      	ldr	r1, [r0, #0]
	add r1,#1
 80009be:	f101 0101 	add.w	r1, r1, #1
	str r1,[r0]
 80009c2:	6001      	str	r1, [r0, #0]
	pop {pc}
 80009c4:	bd00      	pop	{pc}
 80009c6:	0000      	.short	0x0000
	ldr r0,=uwTick
 80009c8:	2000004c 	.word	0x2000004c

080009cc <STK_Config_Polling>:

.section .text.STK_Config_Polling
.type STK_Config_Polling,%function
STK_Config_Polling:
// SysTick configuration PM0214 Sec. 4.5 SysTick timer (STK) pg. 246
	ldr r0,=RCC_BASE
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <STK_Config_Polling+0x30>)
	movw r1,0x1
 80009ce:	f240 0101 	movw	r1, #1
	movt r1,0
 80009d2:	f2c0 0100 	movt	r1, #0
	// RCC_APB2ENR, SYSCFGEN, RM0351 Pg. 259
	ldr r2, [r0,RCC_APB2ENR]    // Read its content to r5
 80009d6:	6e02      	ldr	r2, [r0, #96]	; 0x60
	orr r2, r1                 	// Set   bit 0 to enable SYSCFG clock
 80009d8:	ea42 0201 	orr.w	r2, r2, r1
	str r2, [r0,RCC_APB2ENR]    // Store result in peripheral clock register
 80009dc:	6602      	str	r2, [r0, #96]	; 0x60

	// Set SysTick_CTRL to disabLe SysTick IRQ and SysTick timer
	ldr r0, =SysTick_BASE
 80009de:	4808      	ldr	r0, [pc, #32]	; (8000a00 <STK_Config_Polling+0x34>)

	// Specify the number of cLock cycles between two interrupts
	ldr r2, =3999 // Change it based on interrupt interval
 80009e0:	f640 729f 	movw	r2, #3999	; 0xf9f
	str r2, [r0, #SysTick_LOAD] // Save to SysTick reload register
 80009e4:	6042      	str	r2, [r0, #4]

	// Clear SysTick current value register (SysTick_VAL)
	mov r1, #0
 80009e6:	f04f 0100 	mov.w	r1, #0
	str r1, [r0, #SysTick_VAL] // Write e to SysTick value register
 80009ea:	6081      	str	r1, [r0, #8]

	// Set SysTick_CTRL to enable SysTick timer and SysTick interrupt
	ldr r1, [r0, #SysTick_CTRL]
 80009ec:	6801      	ldr	r1, [r0, #0]
	mov r2,#0x00000005
 80009ee:	f04f 0205 	mov.w	r2, #5
	orr r1,r1,r2  // Enable SysTick counter & interrupt
 80009f2:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r0, #SysTick_CTRL]
 80009f6:	6001      	str	r1, [r0, #0]
	bx lr
 80009f8:	4770      	bx	lr
 80009fa:	0000      	.short	0x0000
	ldr r0,=RCC_BASE
 80009fc:	40021000 	.word	0x40021000
	ldr r0, =SysTick_BASE
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <STK_Polling>:
.size STK_Config_Polling,.-STK_Config_Polling

.section .text.STK_Polling
.type STK_Polling,%function
STK_Polling:
	ldr r4, =SysTick_BASE
 8000a04:	4c05      	ldr	r4, [pc, #20]	; (8000a1c <endgettickpolling+0x4>)
	ldr r5, [r4, #SysTick_CTRL]
 8000a06:	6825      	ldr	r5, [r4, #0]
	and r5,(1<<16)
 8000a08:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
	cbz r5,endgettickpolling
 8000a0c:	b125      	cbz	r5, 8000a18 <endgettickpolling>
	ldr r6,=msTick
 8000a0e:	4e04      	ldr	r6, [pc, #16]	; (8000a20 <endgettickpolling+0x8>)
	ldr r7,[r6]
 8000a10:	6837      	ldr	r7, [r6, #0]
	add r7,1
 8000a12:	f107 0701 	add.w	r7, r7, #1
	str r7,[r6]
 8000a16:	6037      	str	r7, [r6, #0]

08000a18 <endgettickpolling>:

endgettickpolling:
	bx lr
 8000a18:	4770      	bx	lr
 8000a1a:	0000      	.short	0x0000
	ldr r4, =SysTick_BASE
 8000a1c:	e000e010 	.word	0xe000e010
	ldr r6,=msTick
 8000a20:	20000050 	.word	0x20000050

08000a24 <STK_Get_msTick>:
.size	STK_Polling,.-STK_Polling

.section	.text.STK_Get_msTick
.type	STK_Get_msTick,%function
STK_Get_msTick:
	ldr r0,=msTick
 8000a24:	4801      	ldr	r0, [pc, #4]	; (8000a2c <STK_Get_msTick+0x8>)
	ldr r0,[r0]
 8000a26:	6800      	ldr	r0, [r0, #0]
	bx lr
 8000a28:	4770      	bx	lr
 8000a2a:	0000      	.short	0x0000
	ldr r0,=msTick
 8000a2c:	20000050 	.word	0x20000050

08000a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5e:	f000 f811 	bl	8000a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff fbb1 	bl	80001c8 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   r0, =_estack
 8000a68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a74:	08000aec 	.word	0x08000aec
  ldr r2, =_sbss
 8000a78:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a7c:	20000070 	.word	0x20000070

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <__libc_init_array>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4d0d      	ldr	r5, [pc, #52]	; (8000abc <__libc_init_array+0x38>)
 8000a88:	4c0d      	ldr	r4, [pc, #52]	; (8000ac0 <__libc_init_array+0x3c>)
 8000a8a:	1b64      	subs	r4, r4, r5
 8000a8c:	10a4      	asrs	r4, r4, #2
 8000a8e:	2600      	movs	r6, #0
 8000a90:	42a6      	cmp	r6, r4
 8000a92:	d109      	bne.n	8000aa8 <__libc_init_array+0x24>
 8000a94:	4d0b      	ldr	r5, [pc, #44]	; (8000ac4 <__libc_init_array+0x40>)
 8000a96:	4c0c      	ldr	r4, [pc, #48]	; (8000ac8 <__libc_init_array+0x44>)
 8000a98:	f000 f818 	bl	8000acc <_init>
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	10a4      	asrs	r4, r4, #2
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	42a6      	cmp	r6, r4
 8000aa4:	d105      	bne.n	8000ab2 <__libc_init_array+0x2e>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aac:	4798      	blx	r3
 8000aae:	3601      	adds	r6, #1
 8000ab0:	e7ee      	b.n	8000a90 <__libc_init_array+0xc>
 8000ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab6:	4798      	blx	r3
 8000ab8:	3601      	adds	r6, #1
 8000aba:	e7f2      	b.n	8000aa2 <__libc_init_array+0x1e>
 8000abc:	08000ae4 	.word	0x08000ae4
 8000ac0:	08000ae4 	.word	0x08000ae4
 8000ac4:	08000ae4 	.word	0x08000ae4
 8000ac8:	08000ae8 	.word	0x08000ae8

08000acc <_init>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	bf00      	nop
 8000ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad2:	bc08      	pop	{r3}
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	4770      	bx	lr

08000ad8 <_fini>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr
